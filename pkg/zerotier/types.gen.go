// Package zerotier provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package zerotier

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// ControllerNetwork defines model for ControllerNetwork.
type ControllerNetwork struct {
	Capabilities      *[]map[string]interface{} `json:"capabilities,omitempty"`
	CreationTime      *float32                  `json:"creationTime,omitempty"`
	EnableBroadcast   *bool                     `json:"enableBroadcast,omitempty"`
	Id                *string                   `json:"id,omitempty"`
	IpAssignmentPools *[]IpAssignmentPool       `json:"ipAssignmentPools,omitempty"`
	Mtu               *int                      `json:"mtu,omitempty"`
	MulticastLimit    *int                      `json:"multicastLimit,omitempty"`
	Name              *string                   `json:"name,omitempty"`
	Nwid              *string                   `json:"nwid,omitempty"`
	Objtype           *string                   `json:"objtype,omitempty"`
	Private           *bool                     `json:"private,omitempty"`
	RemoteTraceLevel  *int                      `json:"remoteTraceLevel,omitempty"`
	RemoteTraceTarget *string                   `json:"remoteTraceTarget,omitempty"`
	Revision          *int                      `json:"revision,omitempty"`
	Routes            *[]Route                  `json:"routes,omitempty"`
	Rules             *[]map[string]interface{} `json:"rules,omitempty"`
	Tags              *[]map[string]interface{} `json:"tags,omitempty"`
	V4AssignMode      *V4AssignMode             `json:"v4AssignMode,omitempty"`
	V6AssignMode      *V6AssignMode             `json:"v6AssignMode,omitempty"`
}

// ControllerNetworkMember defines model for ControllerNetworkMember.
type ControllerNetworkMember struct {
	ActiveBridge  *bool     `json:"activeBridge,omitempty"`
	Address       *string   `json:"address,omitempty"`
	Authorized    *bool     `json:"authorized,omitempty"`
	Id            *string   `json:"id,omitempty"`
	Identity      *string   `json:"identity,omitempty"`
	IpAssignments *[]string `json:"ipAssignments,omitempty"`
	Nwid          *string   `json:"nwid,omitempty"`
	Revision      *int      `json:"revision,omitempty"`
	VMajor        *int      `json:"vMajor,omitempty"`
	VMinor        *int      `json:"vMinor,omitempty"`
	VProto        *int      `json:"vProto,omitempty"`
	VRev          *int      `json:"vRev,omitempty"`
}

// ControllerStatus defines model for ControllerStatus.
type ControllerStatus struct {
	ApiVersion *int   `json:"apiVersion,omitempty"`
	Clock      *int64 `json:"clock,omitempty"`
	Controller *bool  `json:"controller,omitempty"`
}

// IpAssignmentPool defines model for IpAssignmentPool.
type IpAssignmentPool struct {
	IpRangeEnd   *string `json:"ipRangeEnd,omitempty"`
	IpRangeStart *string `json:"ipRangeStart,omitempty"`
}

// Network defines model for Network.
type Network struct {
	// AllowDNS Let ZeroTier modify the system's DNS settings.
	AllowDNS *bool `json:"allowDNS,omitempty"`

	// AllowDefault Let ZeroTier modify the system's default route.
	AllowDefault *bool `json:"allowDefault,omitempty"`

	// AllowGlobal Let ZeroTier manage IP addresses and Route assignments that aren't in private ranges (rfc1918).
	AllowGlobal *bool `json:"allowGlobal,omitempty"`

	// AllowManaged Let ZeroTier to manage IP addresses and Route assignments.
	AllowManaged      *bool     `json:"allowManaged,omitempty"`
	AssignedAddresses *[]string `json:"assignedAddresses,omitempty"`
	Bridge            *bool     `json:"bridge,omitempty"`
	BroadcastEnabled  *bool     `json:"broadcastEnabled,omitempty"`
	Dns               *struct {
		Domain  *string   `json:"domain,omitempty"`
		Servers *[]string `json:"servers,omitempty"`
	} `json:"dns,omitempty"`
	Id *string `json:"id,omitempty"`

	// Mac MAC address for this network's interface.
	Mac                    *string `json:"mac,omitempty"`
	Mtu                    *int    `json:"mtu,omitempty"`
	MulticastSubscriptions *[]struct {
		Adi *int64  `json:"adi,omitempty"`
		Mac *string `json:"mac,omitempty"`
	} `json:"multicastSubscriptions,omitempty"`
	Name            *string `json:"name,omitempty"`
	NetconfRevision *int    `json:"netconfRevision,omitempty"`
	PortDeviceName  *string `json:"portDeviceName,omitempty"`
	PortError       *int    `json:"portError,omitempty"`
	Routes          *[]struct {
		Flags  *int    `json:"flags,omitempty"`
		Metric *int    `json:"metric,omitempty"`
		Target *string `json:"target,omitempty"`
		Via    *string `json:"via,omitempty"`
	} `json:"routes,omitempty"`
	Status *string `json:"status,omitempty"`
	Type   *string `json:"type,omitempty"`
}

// Peer defines model for Peer.
type Peer struct {
	Address  *string `json:"address,omitempty"`
	IsBonded *bool   `json:"isBonded,omitempty"`
	Latency  *int    `json:"latency,omitempty"`
	Paths    *[]struct {
		Active        *bool   `json:"active,omitempty"`
		Address       *string `json:"address,omitempty"`
		Expired       *bool   `json:"expired,omitempty"`
		LastReceive   *int64  `json:"lastReceive,omitempty"`
		LastSend      *int64  `json:"lastSend,omitempty"`
		Preferred     *bool   `json:"preferred,omitempty"`
		TrustedPathId *int    `json:"trustedPathId,omitempty"`
	} `json:"paths,omitempty"`
	Role         *string `json:"role,omitempty"`
	Version      *string `json:"version,omitempty"`
	VersionMajor *int    `json:"versionMajor,omitempty"`
	VersionMinor *int    `json:"versionMinor,omitempty"`
	VersionRev   *int    `json:"versionRev,omitempty"`
}

// Route defines model for Route.
type Route struct {
	Target *string `json:"target,omitempty"`
	Via    *string `json:"via"`
}

// Status defines model for Status.
type Status struct {
	Address *string `json:"address,omitempty"`
	Clock   *int64  `json:"clock,omitempty"`
	Config  *struct {
		Settings *struct {
			AllowTcpFallbackRelay *bool `json:"allowTcpFallbackRelay,omitempty"`
			PortMappingEnabled    *bool `json:"portMappingEnabled,omitempty"`
			PrimaryPort           *int  `json:"primaryPort,omitempty"`
		} `json:"settings,omitempty"`
	} `json:"config,omitempty"`
	Online               *bool   `json:"online,omitempty"`
	PlanetWorldId        *int64  `json:"planetWorldId,omitempty"`
	PlanetWorldTimestamp *int64  `json:"planetWorldTimestamp,omitempty"`
	PublicIdentity       *string `json:"publicIdentity,omitempty"`
	TcpFallbackActive    *bool   `json:"tcpFallbackActive,omitempty"`
	Version              *string `json:"version,omitempty"`
	VersionBuild         *int    `json:"versionBuild,omitempty"`
	VersionMajor         *int    `json:"versionMajor,omitempty"`
	VersionMinor         *int    `json:"versionMinor,omitempty"`
	VersionRev           *int    `json:"versionRev,omitempty"`
}

// V4AssignMode defines model for V4AssignMode.
type V4AssignMode struct {
	Zt *bool `json:"zt,omitempty"`
}

// V6AssignMode defines model for V6AssignMode.
type V6AssignMode struct {
	N6plane *bool `json:"6plane,omitempty"`
	Rfc4193 *bool `json:"rfc4193,omitempty"`
	Zt      *bool `json:"zt,omitempty"`
}

// GenerateControllerNetworkJSONRequestBody defines body for GenerateControllerNetwork for application/json ContentType.
type GenerateControllerNetworkJSONRequestBody = ControllerNetwork

// SetControllerNetworkJSONRequestBody defines body for SetControllerNetwork for application/json ContentType.
type SetControllerNetworkJSONRequestBody = ControllerNetwork

// SetControllerNetworkMemberJSONRequestBody defines body for SetControllerNetworkMember for application/json ContentType.
type SetControllerNetworkMemberJSONRequestBody = ControllerNetworkMember

// UpdateNetworkJSONRequestBody defines body for UpdateNetwork for application/json ContentType.
type UpdateNetworkJSONRequestBody = Network
