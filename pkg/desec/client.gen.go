// Package desec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package desec

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListRoots request
	ListRoots(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRegisterAccount request with any body
	CreateRegisterAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRegisterAccount(ctx context.Context, body CreateRegisterAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveUser request
	RetrieveUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateChangeEmail request with any body
	CreateChangeEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateChangeEmail(ctx context.Context, body CreateChangeEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAccountDelete request with any body
	CreateAccountDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAccountDelete(ctx context.Context, body CreateAccountDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateResetPassword request with any body
	CreateResetPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateResetPassword(ctx context.Context, body CreateResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTokenFromLogin request with any body
	CreateTokenFromLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTokenFromLogin(ctx context.Context, body CreateTokenFromLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAccountLogout request with any body
	CreateAccountLogoutWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAccountLogout(ctx context.Context, body CreateAccountLogoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTokens request
	ListTokens(ctx context.Context, params *ListTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateToken request with any body
	CreateTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateToken(ctx context.Context, body CreateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DestroyToken request
	DestroyToken(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveToken request
	RetrieveToken(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PartialUpdateToken request with any body
	PartialUpdateTokenWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PartialUpdateToken(ctx context.Context, id string, body PartialUpdateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateToken request with any body
	UpdateTokenWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateToken(ctx context.Context, id string, body UpdateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCaptcha request with any body
	CreateCaptchaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCaptcha(ctx context.Context, body CreateCaptchaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDomains request
	ListDomains(ctx context.Context, params *ListDomainsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDomain request with any body
	CreateDomainWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDomain(ctx context.Context, body CreateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DestroyDomain request
	DestroyDomain(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveDomain request
	RetrieveDomain(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRRsets request
	ListRRsets(ctx context.Context, name string, params *ListRRsetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PartialUpdateRRsets request with any body
	PartialUpdateRRsetsWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PartialUpdateRRsets(ctx context.Context, name string, body PartialUpdateRRsetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRRsets request with any body
	CreateRRsetsWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRRsets(ctx context.Context, name string, body CreateRRsetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRRsets request with any body
	UpdateRRsetsWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRRsets(ctx context.Context, name string, body UpdateRRsetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DestroyRRset request
	DestroyRRset(ctx context.Context, name string, subname string, pType string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveRRset request
	RetrieveRRset(ctx context.Context, name string, subname string, pType string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PartialUpdateRRset request with any body
	PartialUpdateRRsetWithBody(ctx context.Context, name string, subname string, pType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PartialUpdateRRset(ctx context.Context, name string, subname string, pType string, body PartialUpdateRRsetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRRset request with any body
	UpdateRRsetWithBody(ctx context.Context, name string, subname string, pType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRRset(ctx context.Context, name string, subname string, pType string, body UpdateRRsetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDonation request with any body
	CreateDonationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDonation(ctx context.Context, body CreateDonationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDyndnsRRsets request
	ListDyndnsRRsets(ctx context.Context, params *ListDyndnsRRsetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSerials request
	ListSerials(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveAuthenticatedActivateUserAction request
	RetrieveAuthenticatedActivateUserAction(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAuthenticatedActivateUserAction request with any body
	CreateAuthenticatedActivateUserActionWithBody(ctx context.Context, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAuthenticatedActivateUserAction(ctx context.Context, code string, body CreateAuthenticatedActivateUserActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveAuthenticatedChangeEmailUserAction request
	RetrieveAuthenticatedChangeEmailUserAction(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAuthenticatedChangeEmailUserAction request with any body
	CreateAuthenticatedChangeEmailUserActionWithBody(ctx context.Context, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAuthenticatedChangeEmailUserAction(ctx context.Context, code string, body CreateAuthenticatedChangeEmailUserActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveAuthenticatedDeleteUserAction request
	RetrieveAuthenticatedDeleteUserAction(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAuthenticatedDeleteUserAction request with any body
	CreateAuthenticatedDeleteUserActionWithBody(ctx context.Context, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAuthenticatedDeleteUserAction(ctx context.Context, code string, body CreateAuthenticatedDeleteUserActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveAuthenticatedRenewDomainBasicUserAction request
	RetrieveAuthenticatedRenewDomainBasicUserAction(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAuthenticatedRenewDomainBasicUserAction request with any body
	CreateAuthenticatedRenewDomainBasicUserActionWithBody(ctx context.Context, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAuthenticatedRenewDomainBasicUserAction(ctx context.Context, code string, body CreateAuthenticatedRenewDomainBasicUserActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveAuthenticatedResetPasswordUserAction request
	RetrieveAuthenticatedResetPasswordUserAction(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAuthenticatedResetPasswordUserAction request with any body
	CreateAuthenticatedResetPasswordUserActionWithBody(ctx context.Context, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAuthenticatedResetPasswordUserAction(ctx context.Context, code string, body CreateAuthenticatedResetPasswordUserActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListRoots(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRootsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRegisterAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRegisterAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRegisterAccount(ctx context.Context, body CreateRegisterAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRegisterAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateChangeEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateChangeEmailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateChangeEmail(ctx context.Context, body CreateChangeEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateChangeEmailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccountDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccountDelete(ctx context.Context, body CreateAccountDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountDeleteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateResetPasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateResetPasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateResetPassword(ctx context.Context, body CreateResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateResetPasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTokenFromLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTokenFromLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTokenFromLogin(ctx context.Context, body CreateTokenFromLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTokenFromLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccountLogoutWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountLogoutRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccountLogout(ctx context.Context, body CreateAccountLogoutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountLogoutRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTokens(ctx context.Context, params *ListTokensParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTokensRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateToken(ctx context.Context, body CreateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DestroyToken(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDestroyTokenRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveToken(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveTokenRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PartialUpdateTokenWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPartialUpdateTokenRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PartialUpdateToken(ctx context.Context, id string, body PartialUpdateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPartialUpdateTokenRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTokenWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTokenRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateToken(ctx context.Context, id string, body UpdateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTokenRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCaptchaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCaptchaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCaptcha(ctx context.Context, body CreateCaptchaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCaptchaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDomains(ctx context.Context, params *ListDomainsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDomainsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDomainWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDomainRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDomain(ctx context.Context, body CreateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDomainRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DestroyDomain(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDestroyDomainRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveDomain(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveDomainRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRRsets(ctx context.Context, name string, params *ListRRsetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRRsetsRequest(c.Server, name, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PartialUpdateRRsetsWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPartialUpdateRRsetsRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PartialUpdateRRsets(ctx context.Context, name string, body PartialUpdateRRsetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPartialUpdateRRsetsRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRRsetsWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRRsetsRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRRsets(ctx context.Context, name string, body CreateRRsetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRRsetsRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRRsetsWithBody(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRRsetsRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRRsets(ctx context.Context, name string, body UpdateRRsetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRRsetsRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DestroyRRset(ctx context.Context, name string, subname string, pType string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDestroyRRsetRequest(c.Server, name, subname, pType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveRRset(ctx context.Context, name string, subname string, pType string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveRRsetRequest(c.Server, name, subname, pType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PartialUpdateRRsetWithBody(ctx context.Context, name string, subname string, pType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPartialUpdateRRsetRequestWithBody(c.Server, name, subname, pType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PartialUpdateRRset(ctx context.Context, name string, subname string, pType string, body PartialUpdateRRsetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPartialUpdateRRsetRequest(c.Server, name, subname, pType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRRsetWithBody(ctx context.Context, name string, subname string, pType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRRsetRequestWithBody(c.Server, name, subname, pType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRRset(ctx context.Context, name string, subname string, pType string, body UpdateRRsetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRRsetRequest(c.Server, name, subname, pType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDonationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDonationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDonation(ctx context.Context, body CreateDonationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDonationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDyndnsRRsets(ctx context.Context, params *ListDyndnsRRsetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDyndnsRRsetsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSerials(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSerialsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveAuthenticatedActivateUserAction(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveAuthenticatedActivateUserActionRequest(c.Server, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthenticatedActivateUserActionWithBody(ctx context.Context, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthenticatedActivateUserActionRequestWithBody(c.Server, code, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthenticatedActivateUserAction(ctx context.Context, code string, body CreateAuthenticatedActivateUserActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthenticatedActivateUserActionRequest(c.Server, code, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveAuthenticatedChangeEmailUserAction(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveAuthenticatedChangeEmailUserActionRequest(c.Server, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthenticatedChangeEmailUserActionWithBody(ctx context.Context, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthenticatedChangeEmailUserActionRequestWithBody(c.Server, code, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthenticatedChangeEmailUserAction(ctx context.Context, code string, body CreateAuthenticatedChangeEmailUserActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthenticatedChangeEmailUserActionRequest(c.Server, code, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveAuthenticatedDeleteUserAction(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveAuthenticatedDeleteUserActionRequest(c.Server, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthenticatedDeleteUserActionWithBody(ctx context.Context, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthenticatedDeleteUserActionRequestWithBody(c.Server, code, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthenticatedDeleteUserAction(ctx context.Context, code string, body CreateAuthenticatedDeleteUserActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthenticatedDeleteUserActionRequest(c.Server, code, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveAuthenticatedRenewDomainBasicUserAction(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveAuthenticatedRenewDomainBasicUserActionRequest(c.Server, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthenticatedRenewDomainBasicUserActionWithBody(ctx context.Context, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthenticatedRenewDomainBasicUserActionRequestWithBody(c.Server, code, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthenticatedRenewDomainBasicUserAction(ctx context.Context, code string, body CreateAuthenticatedRenewDomainBasicUserActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthenticatedRenewDomainBasicUserActionRequest(c.Server, code, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveAuthenticatedResetPasswordUserAction(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveAuthenticatedResetPasswordUserActionRequest(c.Server, code)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthenticatedResetPasswordUserActionWithBody(ctx context.Context, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthenticatedResetPasswordUserActionRequestWithBody(c.Server, code, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAuthenticatedResetPasswordUserAction(ctx context.Context, code string, body CreateAuthenticatedResetPasswordUserActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAuthenticatedResetPasswordUserActionRequest(c.Server, code, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListRootsRequest generates requests for ListRoots
func NewListRootsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRegisterAccountRequest calls the generic CreateRegisterAccount builder with application/json body
func NewCreateRegisterAccountRequest(server string, body CreateRegisterAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRegisterAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateRegisterAccountRequestWithBody generates requests for CreateRegisterAccount with any type of body
func NewCreateRegisterAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRetrieveUserRequest generates requests for RetrieveUser
func NewRetrieveUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/account/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateChangeEmailRequest calls the generic CreateChangeEmail builder with application/json body
func NewCreateChangeEmailRequest(server string, body CreateChangeEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateChangeEmailRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateChangeEmailRequestWithBody generates requests for CreateChangeEmail with any type of body
func NewCreateChangeEmailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/account/change-email/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateAccountDeleteRequest calls the generic CreateAccountDelete builder with application/json body
func NewCreateAccountDeleteRequest(server string, body CreateAccountDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAccountDeleteRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAccountDeleteRequestWithBody generates requests for CreateAccountDelete with any type of body
func NewCreateAccountDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/account/delete/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateResetPasswordRequest calls the generic CreateResetPassword builder with application/json body
func NewCreateResetPasswordRequest(server string, body CreateResetPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateResetPasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateResetPasswordRequestWithBody generates requests for CreateResetPassword with any type of body
func NewCreateResetPasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/account/reset-password/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateTokenFromLoginRequest calls the generic CreateTokenFromLogin builder with application/json body
func NewCreateTokenFromLoginRequest(server string, body CreateTokenFromLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTokenFromLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTokenFromLoginRequestWithBody generates requests for CreateTokenFromLogin with any type of body
func NewCreateTokenFromLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/login/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateAccountLogoutRequest calls the generic CreateAccountLogout builder with application/json body
func NewCreateAccountLogoutRequest(server string, body CreateAccountLogoutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAccountLogoutRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAccountLogoutRequestWithBody generates requests for CreateAccountLogout with any type of body
func NewCreateAccountLogoutRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/logout/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListTokensRequest generates requests for ListTokens
func NewListTokensRequest(server string, params *ListTokensParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/tokens/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTokenRequest calls the generic CreateToken builder with application/json body
func NewCreateTokenRequest(server string, body CreateTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTokenRequestWithBody generates requests for CreateToken with any type of body
func NewCreateTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/tokens/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDestroyTokenRequest generates requests for DestroyToken
func NewDestroyTokenRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/tokens/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveTokenRequest generates requests for RetrieveToken
func NewRetrieveTokenRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/tokens/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPartialUpdateTokenRequest calls the generic PartialUpdateToken builder with application/json body
func NewPartialUpdateTokenRequest(server string, id string, body PartialUpdateTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPartialUpdateTokenRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPartialUpdateTokenRequestWithBody generates requests for PartialUpdateToken with any type of body
func NewPartialUpdateTokenRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/tokens/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateTokenRequest calls the generic UpdateToken builder with application/json body
func NewUpdateTokenRequest(server string, id string, body UpdateTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTokenRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateTokenRequestWithBody generates requests for UpdateToken with any type of body
func NewUpdateTokenRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth/tokens/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateCaptchaRequest calls the generic CreateCaptcha builder with application/json body
func NewCreateCaptchaRequest(server string, body CreateCaptchaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCaptchaRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCaptchaRequestWithBody generates requests for CreateCaptcha with any type of body
func NewCreateCaptchaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/captcha/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListDomainsRequest generates requests for ListDomains
func NewListDomainsRequest(server string, params *ListDomainsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/domains/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDomainRequest calls the generic CreateDomain builder with application/json body
func NewCreateDomainRequest(server string, body CreateDomainJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDomainRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateDomainRequestWithBody generates requests for CreateDomain with any type of body
func NewCreateDomainRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/domains/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDestroyDomainRequest generates requests for DestroyDomain
func NewDestroyDomainRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/domains/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveDomainRequest generates requests for RetrieveDomain
func NewRetrieveDomainRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/domains/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRRsetsRequest generates requests for ListRRsets
func NewListRRsetsRequest(server string, name string, params *ListRRsetsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/domains/%s/rrsets/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Subname != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subname", runtime.ParamLocationQuery, *params.Subname); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPartialUpdateRRsetsRequest calls the generic PartialUpdateRRsets builder with application/json body
func NewPartialUpdateRRsetsRequest(server string, name string, body PartialUpdateRRsetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPartialUpdateRRsetsRequestWithBody(server, name, "application/json", bodyReader)
}

// NewPartialUpdateRRsetsRequestWithBody generates requests for PartialUpdateRRsets with any type of body
func NewPartialUpdateRRsetsRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/domains/%s/rrsets/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateRRsetsRequest calls the generic CreateRRsets builder with application/json body
func NewCreateRRsetsRequest(server string, name string, body CreateRRsetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRRsetsRequestWithBody(server, name, "application/json", bodyReader)
}

// NewCreateRRsetsRequestWithBody generates requests for CreateRRsets with any type of body
func NewCreateRRsetsRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/domains/%s/rrsets/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateRRsetsRequest calls the generic UpdateRRsets builder with application/json body
func NewUpdateRRsetsRequest(server string, name string, body UpdateRRsetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRRsetsRequestWithBody(server, name, "application/json", bodyReader)
}

// NewUpdateRRsetsRequestWithBody generates requests for UpdateRRsets with any type of body
func NewUpdateRRsetsRequestWithBody(server string, name string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/domains/%s/rrsets/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDestroyRRsetRequest generates requests for DestroyRRset
func NewDestroyRRsetRequest(server string, name string, subname string, pType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subname", runtime.ParamLocationPath, subname)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/domains/%s/rrsets/%s.../%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveRRsetRequest generates requests for RetrieveRRset
func NewRetrieveRRsetRequest(server string, name string, subname string, pType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subname", runtime.ParamLocationPath, subname)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/domains/%s/rrsets/%s.../%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPartialUpdateRRsetRequest calls the generic PartialUpdateRRset builder with application/json body
func NewPartialUpdateRRsetRequest(server string, name string, subname string, pType string, body PartialUpdateRRsetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPartialUpdateRRsetRequestWithBody(server, name, subname, pType, "application/json", bodyReader)
}

// NewPartialUpdateRRsetRequestWithBody generates requests for PartialUpdateRRset with any type of body
func NewPartialUpdateRRsetRequestWithBody(server string, name string, subname string, pType string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subname", runtime.ParamLocationPath, subname)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/domains/%s/rrsets/%s.../%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateRRsetRequest calls the generic UpdateRRset builder with application/json body
func NewUpdateRRsetRequest(server string, name string, subname string, pType string, body UpdateRRsetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRRsetRequestWithBody(server, name, subname, pType, "application/json", bodyReader)
}

// NewUpdateRRsetRequestWithBody generates requests for UpdateRRset with any type of body
func NewUpdateRRsetRequestWithBody(server string, name string, subname string, pType string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subname", runtime.ParamLocationPath, subname)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/domains/%s/rrsets/%s.../%s/", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateDonationRequest calls the generic CreateDonation builder with application/json body
func NewCreateDonationRequest(server string, body CreateDonationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDonationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateDonationRequestWithBody generates requests for CreateDonation with any type of body
func NewCreateDonationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/donation/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListDyndnsRRsetsRequest generates requests for ListDyndnsRRsets
func NewListDyndnsRRsetsRequest(server string, params *ListDyndnsRRsetsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dyndns/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSerialsRequest generates requests for ListSerials
func NewListSerialsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/serials/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveAuthenticatedActivateUserActionRequest generates requests for RetrieveAuthenticatedActivateUserAction
func NewRetrieveAuthenticatedActivateUserActionRequest(server string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/v/activate-account/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAuthenticatedActivateUserActionRequest calls the generic CreateAuthenticatedActivateUserAction builder with application/json body
func NewCreateAuthenticatedActivateUserActionRequest(server string, code string, body CreateAuthenticatedActivateUserActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAuthenticatedActivateUserActionRequestWithBody(server, code, "application/json", bodyReader)
}

// NewCreateAuthenticatedActivateUserActionRequestWithBody generates requests for CreateAuthenticatedActivateUserAction with any type of body
func NewCreateAuthenticatedActivateUserActionRequestWithBody(server string, code string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/v/activate-account/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRetrieveAuthenticatedChangeEmailUserActionRequest generates requests for RetrieveAuthenticatedChangeEmailUserAction
func NewRetrieveAuthenticatedChangeEmailUserActionRequest(server string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/v/change-email/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAuthenticatedChangeEmailUserActionRequest calls the generic CreateAuthenticatedChangeEmailUserAction builder with application/json body
func NewCreateAuthenticatedChangeEmailUserActionRequest(server string, code string, body CreateAuthenticatedChangeEmailUserActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAuthenticatedChangeEmailUserActionRequestWithBody(server, code, "application/json", bodyReader)
}

// NewCreateAuthenticatedChangeEmailUserActionRequestWithBody generates requests for CreateAuthenticatedChangeEmailUserAction with any type of body
func NewCreateAuthenticatedChangeEmailUserActionRequestWithBody(server string, code string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/v/change-email/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRetrieveAuthenticatedDeleteUserActionRequest generates requests for RetrieveAuthenticatedDeleteUserAction
func NewRetrieveAuthenticatedDeleteUserActionRequest(server string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/v/delete-account/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAuthenticatedDeleteUserActionRequest calls the generic CreateAuthenticatedDeleteUserAction builder with application/json body
func NewCreateAuthenticatedDeleteUserActionRequest(server string, code string, body CreateAuthenticatedDeleteUserActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAuthenticatedDeleteUserActionRequestWithBody(server, code, "application/json", bodyReader)
}

// NewCreateAuthenticatedDeleteUserActionRequestWithBody generates requests for CreateAuthenticatedDeleteUserAction with any type of body
func NewCreateAuthenticatedDeleteUserActionRequestWithBody(server string, code string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/v/delete-account/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRetrieveAuthenticatedRenewDomainBasicUserActionRequest generates requests for RetrieveAuthenticatedRenewDomainBasicUserAction
func NewRetrieveAuthenticatedRenewDomainBasicUserActionRequest(server string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/v/renew-domain/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAuthenticatedRenewDomainBasicUserActionRequest calls the generic CreateAuthenticatedRenewDomainBasicUserAction builder with application/json body
func NewCreateAuthenticatedRenewDomainBasicUserActionRequest(server string, code string, body CreateAuthenticatedRenewDomainBasicUserActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAuthenticatedRenewDomainBasicUserActionRequestWithBody(server, code, "application/json", bodyReader)
}

// NewCreateAuthenticatedRenewDomainBasicUserActionRequestWithBody generates requests for CreateAuthenticatedRenewDomainBasicUserAction with any type of body
func NewCreateAuthenticatedRenewDomainBasicUserActionRequestWithBody(server string, code string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/v/renew-domain/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRetrieveAuthenticatedResetPasswordUserActionRequest generates requests for RetrieveAuthenticatedResetPasswordUserAction
func NewRetrieveAuthenticatedResetPasswordUserActionRequest(server string, code string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/v/reset-password/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAuthenticatedResetPasswordUserActionRequest calls the generic CreateAuthenticatedResetPasswordUserAction builder with application/json body
func NewCreateAuthenticatedResetPasswordUserActionRequest(server string, code string, body CreateAuthenticatedResetPasswordUserActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAuthenticatedResetPasswordUserActionRequestWithBody(server, code, "application/json", bodyReader)
}

// NewCreateAuthenticatedResetPasswordUserActionRequestWithBody generates requests for CreateAuthenticatedResetPasswordUserAction with any type of body
func NewCreateAuthenticatedResetPasswordUserActionRequestWithBody(server string, code string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "code", runtime.ParamLocationPath, code)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/v/reset-password/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListRoots request
	ListRootsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListRootsResponse, error)

	// CreateRegisterAccount request with any body
	CreateRegisterAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRegisterAccountResponse, error)

	CreateRegisterAccountWithResponse(ctx context.Context, body CreateRegisterAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRegisterAccountResponse, error)

	// RetrieveUser request
	RetrieveUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RetrieveUserResponse, error)

	// CreateChangeEmail request with any body
	CreateChangeEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateChangeEmailResponse, error)

	CreateChangeEmailWithResponse(ctx context.Context, body CreateChangeEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateChangeEmailResponse, error)

	// CreateAccountDelete request with any body
	CreateAccountDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountDeleteResponse, error)

	CreateAccountDeleteWithResponse(ctx context.Context, body CreateAccountDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountDeleteResponse, error)

	// CreateResetPassword request with any body
	CreateResetPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResetPasswordResponse, error)

	CreateResetPasswordWithResponse(ctx context.Context, body CreateResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResetPasswordResponse, error)

	// CreateTokenFromLogin request with any body
	CreateTokenFromLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTokenFromLoginResponse, error)

	CreateTokenFromLoginWithResponse(ctx context.Context, body CreateTokenFromLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTokenFromLoginResponse, error)

	// CreateAccountLogout request with any body
	CreateAccountLogoutWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountLogoutResponse, error)

	CreateAccountLogoutWithResponse(ctx context.Context, body CreateAccountLogoutJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountLogoutResponse, error)

	// ListTokens request
	ListTokensWithResponse(ctx context.Context, params *ListTokensParams, reqEditors ...RequestEditorFn) (*ListTokensResponse, error)

	// CreateToken request with any body
	CreateTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTokenResponse, error)

	CreateTokenWithResponse(ctx context.Context, body CreateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTokenResponse, error)

	// DestroyToken request
	DestroyTokenWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DestroyTokenResponse, error)

	// RetrieveToken request
	RetrieveTokenWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*RetrieveTokenResponse, error)

	// PartialUpdateToken request with any body
	PartialUpdateTokenWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PartialUpdateTokenResponse, error)

	PartialUpdateTokenWithResponse(ctx context.Context, id string, body PartialUpdateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PartialUpdateTokenResponse, error)

	// UpdateToken request with any body
	UpdateTokenWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTokenResponse, error)

	UpdateTokenWithResponse(ctx context.Context, id string, body UpdateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTokenResponse, error)

	// CreateCaptcha request with any body
	CreateCaptchaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCaptchaResponse, error)

	CreateCaptchaWithResponse(ctx context.Context, body CreateCaptchaJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCaptchaResponse, error)

	// ListDomains request
	ListDomainsWithResponse(ctx context.Context, params *ListDomainsParams, reqEditors ...RequestEditorFn) (*ListDomainsResponse, error)

	// CreateDomain request with any body
	CreateDomainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDomainResponse, error)

	CreateDomainWithResponse(ctx context.Context, body CreateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDomainResponse, error)

	// DestroyDomain request
	DestroyDomainWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DestroyDomainResponse, error)

	// RetrieveDomain request
	RetrieveDomainWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*RetrieveDomainResponse, error)

	// ListRRsets request
	ListRRsetsWithResponse(ctx context.Context, name string, params *ListRRsetsParams, reqEditors ...RequestEditorFn) (*ListRRsetsResponse, error)

	// PartialUpdateRRsets request with any body
	PartialUpdateRRsetsWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PartialUpdateRRsetsResponse, error)

	PartialUpdateRRsetsWithResponse(ctx context.Context, name string, body PartialUpdateRRsetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PartialUpdateRRsetsResponse, error)

	// CreateRRsets request with any body
	CreateRRsetsWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRRsetsResponse, error)

	CreateRRsetsWithResponse(ctx context.Context, name string, body CreateRRsetsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRRsetsResponse, error)

	// UpdateRRsets request with any body
	UpdateRRsetsWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRRsetsResponse, error)

	UpdateRRsetsWithResponse(ctx context.Context, name string, body UpdateRRsetsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRRsetsResponse, error)

	// DestroyRRset request
	DestroyRRsetWithResponse(ctx context.Context, name string, subname string, pType string, reqEditors ...RequestEditorFn) (*DestroyRRsetResponse, error)

	// RetrieveRRset request
	RetrieveRRsetWithResponse(ctx context.Context, name string, subname string, pType string, reqEditors ...RequestEditorFn) (*RetrieveRRsetResponse, error)

	// PartialUpdateRRset request with any body
	PartialUpdateRRsetWithBodyWithResponse(ctx context.Context, name string, subname string, pType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PartialUpdateRRsetResponse, error)

	PartialUpdateRRsetWithResponse(ctx context.Context, name string, subname string, pType string, body PartialUpdateRRsetJSONRequestBody, reqEditors ...RequestEditorFn) (*PartialUpdateRRsetResponse, error)

	// UpdateRRset request with any body
	UpdateRRsetWithBodyWithResponse(ctx context.Context, name string, subname string, pType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRRsetResponse, error)

	UpdateRRsetWithResponse(ctx context.Context, name string, subname string, pType string, body UpdateRRsetJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRRsetResponse, error)

	// CreateDonation request with any body
	CreateDonationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDonationResponse, error)

	CreateDonationWithResponse(ctx context.Context, body CreateDonationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDonationResponse, error)

	// ListDyndnsRRsets request
	ListDyndnsRRsetsWithResponse(ctx context.Context, params *ListDyndnsRRsetsParams, reqEditors ...RequestEditorFn) (*ListDyndnsRRsetsResponse, error)

	// ListSerials request
	ListSerialsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListSerialsResponse, error)

	// RetrieveAuthenticatedActivateUserAction request
	RetrieveAuthenticatedActivateUserActionWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*RetrieveAuthenticatedActivateUserActionResponse, error)

	// CreateAuthenticatedActivateUserAction request with any body
	CreateAuthenticatedActivateUserActionWithBodyWithResponse(ctx context.Context, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthenticatedActivateUserActionResponse, error)

	CreateAuthenticatedActivateUserActionWithResponse(ctx context.Context, code string, body CreateAuthenticatedActivateUserActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthenticatedActivateUserActionResponse, error)

	// RetrieveAuthenticatedChangeEmailUserAction request
	RetrieveAuthenticatedChangeEmailUserActionWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*RetrieveAuthenticatedChangeEmailUserActionResponse, error)

	// CreateAuthenticatedChangeEmailUserAction request with any body
	CreateAuthenticatedChangeEmailUserActionWithBodyWithResponse(ctx context.Context, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthenticatedChangeEmailUserActionResponse, error)

	CreateAuthenticatedChangeEmailUserActionWithResponse(ctx context.Context, code string, body CreateAuthenticatedChangeEmailUserActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthenticatedChangeEmailUserActionResponse, error)

	// RetrieveAuthenticatedDeleteUserAction request
	RetrieveAuthenticatedDeleteUserActionWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*RetrieveAuthenticatedDeleteUserActionResponse, error)

	// CreateAuthenticatedDeleteUserAction request with any body
	CreateAuthenticatedDeleteUserActionWithBodyWithResponse(ctx context.Context, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthenticatedDeleteUserActionResponse, error)

	CreateAuthenticatedDeleteUserActionWithResponse(ctx context.Context, code string, body CreateAuthenticatedDeleteUserActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthenticatedDeleteUserActionResponse, error)

	// RetrieveAuthenticatedRenewDomainBasicUserAction request
	RetrieveAuthenticatedRenewDomainBasicUserActionWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*RetrieveAuthenticatedRenewDomainBasicUserActionResponse, error)

	// CreateAuthenticatedRenewDomainBasicUserAction request with any body
	CreateAuthenticatedRenewDomainBasicUserActionWithBodyWithResponse(ctx context.Context, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthenticatedRenewDomainBasicUserActionResponse, error)

	CreateAuthenticatedRenewDomainBasicUserActionWithResponse(ctx context.Context, code string, body CreateAuthenticatedRenewDomainBasicUserActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthenticatedRenewDomainBasicUserActionResponse, error)

	// RetrieveAuthenticatedResetPasswordUserAction request
	RetrieveAuthenticatedResetPasswordUserActionWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*RetrieveAuthenticatedResetPasswordUserActionResponse, error)

	// CreateAuthenticatedResetPasswordUserAction request with any body
	CreateAuthenticatedResetPasswordUserActionWithBodyWithResponse(ctx context.Context, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthenticatedResetPasswordUserActionResponse, error)

	CreateAuthenticatedResetPasswordUserActionWithResponse(ctx context.Context, code string, body CreateAuthenticatedResetPasswordUserActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthenticatedResetPasswordUserActionResponse, error)
}

type ListRootsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]interface{}
}

// Status returns HTTPResponse.Status
func (r ListRootsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRootsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRegisterAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RegisterAccount
}

// Status returns HTTPResponse.Status
func (r CreateRegisterAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRegisterAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r RetrieveUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateChangeEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ChangeEmail
}

// Status returns HTTPResponse.Status
func (r CreateChangeEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateChangeEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAccountDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *interface{}
}

// Status returns HTTPResponse.Status
func (r CreateAccountDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAccountDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateResetPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ResetPassword
}

// Status returns HTTPResponse.Status
func (r CreateResetPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateResetPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTokenFromLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Token
}

// Status returns HTTPResponse.Status
func (r CreateTokenFromLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTokenFromLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAccountLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *interface{}
}

// Status returns HTTPResponse.Status
func (r CreateAccountLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAccountLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Next     *string  `json:"next"`
		Previous *string  `json:"previous"`
		Results  *[]Token `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Token
}

// Status returns HTTPResponse.Status
func (r CreateTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DestroyTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DestroyTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DestroyTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Token
}

// Status returns HTTPResponse.Status
func (r RetrieveTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PartialUpdateTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Token
}

// Status returns HTTPResponse.Status
func (r PartialUpdateTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PartialUpdateTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Token
}

// Status returns HTTPResponse.Status
func (r UpdateTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCaptchaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Captcha
}

// Status returns HTTPResponse.Status
func (r CreateCaptchaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCaptchaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDomainsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Domain
}

// Status returns HTTPResponse.Status
func (r ListDomainsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDomainsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Domain
}

// Status returns HTTPResponse.Status
func (r CreateDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DestroyDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DestroyDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DestroyDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Domain
}

// Status returns HTTPResponse.Status
func (r RetrieveDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRRsetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RRset
}

// Status returns HTTPResponse.Status
func (r ListRRsetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRRsetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PartialUpdateRRsetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RRset
}

// Status returns HTTPResponse.Status
func (r PartialUpdateRRsetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PartialUpdateRRsetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRRsetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RRset
}

// Status returns HTTPResponse.Status
func (r CreateRRsetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRRsetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRRsetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RRset
}

// Status returns HTTPResponse.Status
func (r UpdateRRsetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRRsetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DestroyRRsetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DestroyRRsetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DestroyRRsetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveRRsetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RRset
}

// Status returns HTTPResponse.Status
func (r RetrieveRRsetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveRRsetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PartialUpdateRRsetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RRset
}

// Status returns HTTPResponse.Status
func (r PartialUpdateRRsetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PartialUpdateRRsetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRRsetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RRset
}

// Status returns HTTPResponse.Status
func (r UpdateRRsetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRRsetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDonationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Donation
}

// Status returns HTTPResponse.Status
func (r CreateDonationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDonationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDyndnsRRsetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ListDyndnsRRsetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDyndnsRRsetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSerialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]interface{}
}

// Status returns HTTPResponse.Status
func (r ListSerialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSerialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveAuthenticatedActivateUserActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthenticatedActivateUserAction
}

// Status returns HTTPResponse.Status
func (r RetrieveAuthenticatedActivateUserActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveAuthenticatedActivateUserActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAuthenticatedActivateUserActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AuthenticatedActivateUserAction
}

// Status returns HTTPResponse.Status
func (r CreateAuthenticatedActivateUserActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAuthenticatedActivateUserActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveAuthenticatedChangeEmailUserActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthenticatedChangeEmailUserAction
}

// Status returns HTTPResponse.Status
func (r RetrieveAuthenticatedChangeEmailUserActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveAuthenticatedChangeEmailUserActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAuthenticatedChangeEmailUserActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AuthenticatedChangeEmailUserAction
}

// Status returns HTTPResponse.Status
func (r CreateAuthenticatedChangeEmailUserActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAuthenticatedChangeEmailUserActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveAuthenticatedDeleteUserActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthenticatedDeleteUserAction
}

// Status returns HTTPResponse.Status
func (r RetrieveAuthenticatedDeleteUserActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveAuthenticatedDeleteUserActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAuthenticatedDeleteUserActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AuthenticatedDeleteUserAction
}

// Status returns HTTPResponse.Status
func (r CreateAuthenticatedDeleteUserActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAuthenticatedDeleteUserActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveAuthenticatedRenewDomainBasicUserActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthenticatedRenewDomainBasicUserAction
}

// Status returns HTTPResponse.Status
func (r RetrieveAuthenticatedRenewDomainBasicUserActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveAuthenticatedRenewDomainBasicUserActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAuthenticatedRenewDomainBasicUserActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AuthenticatedRenewDomainBasicUserAction
}

// Status returns HTTPResponse.Status
func (r CreateAuthenticatedRenewDomainBasicUserActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAuthenticatedRenewDomainBasicUserActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveAuthenticatedResetPasswordUserActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthenticatedResetPasswordUserAction
}

// Status returns HTTPResponse.Status
func (r RetrieveAuthenticatedResetPasswordUserActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveAuthenticatedResetPasswordUserActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAuthenticatedResetPasswordUserActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AuthenticatedResetPasswordUserAction
}

// Status returns HTTPResponse.Status
func (r CreateAuthenticatedResetPasswordUserActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAuthenticatedResetPasswordUserActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListRootsWithResponse request returning *ListRootsResponse
func (c *ClientWithResponses) ListRootsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListRootsResponse, error) {
	rsp, err := c.ListRoots(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRootsResponse(rsp)
}

// CreateRegisterAccountWithBodyWithResponse request with arbitrary body returning *CreateRegisterAccountResponse
func (c *ClientWithResponses) CreateRegisterAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRegisterAccountResponse, error) {
	rsp, err := c.CreateRegisterAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRegisterAccountResponse(rsp)
}

func (c *ClientWithResponses) CreateRegisterAccountWithResponse(ctx context.Context, body CreateRegisterAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRegisterAccountResponse, error) {
	rsp, err := c.CreateRegisterAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRegisterAccountResponse(rsp)
}

// RetrieveUserWithResponse request returning *RetrieveUserResponse
func (c *ClientWithResponses) RetrieveUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RetrieveUserResponse, error) {
	rsp, err := c.RetrieveUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveUserResponse(rsp)
}

// CreateChangeEmailWithBodyWithResponse request with arbitrary body returning *CreateChangeEmailResponse
func (c *ClientWithResponses) CreateChangeEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateChangeEmailResponse, error) {
	rsp, err := c.CreateChangeEmailWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateChangeEmailResponse(rsp)
}

func (c *ClientWithResponses) CreateChangeEmailWithResponse(ctx context.Context, body CreateChangeEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateChangeEmailResponse, error) {
	rsp, err := c.CreateChangeEmail(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateChangeEmailResponse(rsp)
}

// CreateAccountDeleteWithBodyWithResponse request with arbitrary body returning *CreateAccountDeleteResponse
func (c *ClientWithResponses) CreateAccountDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountDeleteResponse, error) {
	rsp, err := c.CreateAccountDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountDeleteResponse(rsp)
}

func (c *ClientWithResponses) CreateAccountDeleteWithResponse(ctx context.Context, body CreateAccountDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountDeleteResponse, error) {
	rsp, err := c.CreateAccountDelete(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountDeleteResponse(rsp)
}

// CreateResetPasswordWithBodyWithResponse request with arbitrary body returning *CreateResetPasswordResponse
func (c *ClientWithResponses) CreateResetPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResetPasswordResponse, error) {
	rsp, err := c.CreateResetPasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResetPasswordResponse(rsp)
}

func (c *ClientWithResponses) CreateResetPasswordWithResponse(ctx context.Context, body CreateResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResetPasswordResponse, error) {
	rsp, err := c.CreateResetPassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateResetPasswordResponse(rsp)
}

// CreateTokenFromLoginWithBodyWithResponse request with arbitrary body returning *CreateTokenFromLoginResponse
func (c *ClientWithResponses) CreateTokenFromLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTokenFromLoginResponse, error) {
	rsp, err := c.CreateTokenFromLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTokenFromLoginResponse(rsp)
}

func (c *ClientWithResponses) CreateTokenFromLoginWithResponse(ctx context.Context, body CreateTokenFromLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTokenFromLoginResponse, error) {
	rsp, err := c.CreateTokenFromLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTokenFromLoginResponse(rsp)
}

// CreateAccountLogoutWithBodyWithResponse request with arbitrary body returning *CreateAccountLogoutResponse
func (c *ClientWithResponses) CreateAccountLogoutWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountLogoutResponse, error) {
	rsp, err := c.CreateAccountLogoutWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountLogoutResponse(rsp)
}

func (c *ClientWithResponses) CreateAccountLogoutWithResponse(ctx context.Context, body CreateAccountLogoutJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountLogoutResponse, error) {
	rsp, err := c.CreateAccountLogout(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountLogoutResponse(rsp)
}

// ListTokensWithResponse request returning *ListTokensResponse
func (c *ClientWithResponses) ListTokensWithResponse(ctx context.Context, params *ListTokensParams, reqEditors ...RequestEditorFn) (*ListTokensResponse, error) {
	rsp, err := c.ListTokens(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTokensResponse(rsp)
}

// CreateTokenWithBodyWithResponse request with arbitrary body returning *CreateTokenResponse
func (c *ClientWithResponses) CreateTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTokenResponse, error) {
	rsp, err := c.CreateTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTokenResponse(rsp)
}

func (c *ClientWithResponses) CreateTokenWithResponse(ctx context.Context, body CreateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTokenResponse, error) {
	rsp, err := c.CreateToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTokenResponse(rsp)
}

// DestroyTokenWithResponse request returning *DestroyTokenResponse
func (c *ClientWithResponses) DestroyTokenWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DestroyTokenResponse, error) {
	rsp, err := c.DestroyToken(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDestroyTokenResponse(rsp)
}

// RetrieveTokenWithResponse request returning *RetrieveTokenResponse
func (c *ClientWithResponses) RetrieveTokenWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*RetrieveTokenResponse, error) {
	rsp, err := c.RetrieveToken(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveTokenResponse(rsp)
}

// PartialUpdateTokenWithBodyWithResponse request with arbitrary body returning *PartialUpdateTokenResponse
func (c *ClientWithResponses) PartialUpdateTokenWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PartialUpdateTokenResponse, error) {
	rsp, err := c.PartialUpdateTokenWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePartialUpdateTokenResponse(rsp)
}

func (c *ClientWithResponses) PartialUpdateTokenWithResponse(ctx context.Context, id string, body PartialUpdateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*PartialUpdateTokenResponse, error) {
	rsp, err := c.PartialUpdateToken(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePartialUpdateTokenResponse(rsp)
}

// UpdateTokenWithBodyWithResponse request with arbitrary body returning *UpdateTokenResponse
func (c *ClientWithResponses) UpdateTokenWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTokenResponse, error) {
	rsp, err := c.UpdateTokenWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTokenResponse(rsp)
}

func (c *ClientWithResponses) UpdateTokenWithResponse(ctx context.Context, id string, body UpdateTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTokenResponse, error) {
	rsp, err := c.UpdateToken(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTokenResponse(rsp)
}

// CreateCaptchaWithBodyWithResponse request with arbitrary body returning *CreateCaptchaResponse
func (c *ClientWithResponses) CreateCaptchaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCaptchaResponse, error) {
	rsp, err := c.CreateCaptchaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCaptchaResponse(rsp)
}

func (c *ClientWithResponses) CreateCaptchaWithResponse(ctx context.Context, body CreateCaptchaJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCaptchaResponse, error) {
	rsp, err := c.CreateCaptcha(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCaptchaResponse(rsp)
}

// ListDomainsWithResponse request returning *ListDomainsResponse
func (c *ClientWithResponses) ListDomainsWithResponse(ctx context.Context, params *ListDomainsParams, reqEditors ...RequestEditorFn) (*ListDomainsResponse, error) {
	rsp, err := c.ListDomains(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDomainsResponse(rsp)
}

// CreateDomainWithBodyWithResponse request with arbitrary body returning *CreateDomainResponse
func (c *ClientWithResponses) CreateDomainWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDomainResponse, error) {
	rsp, err := c.CreateDomainWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDomainResponse(rsp)
}

func (c *ClientWithResponses) CreateDomainWithResponse(ctx context.Context, body CreateDomainJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDomainResponse, error) {
	rsp, err := c.CreateDomain(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDomainResponse(rsp)
}

// DestroyDomainWithResponse request returning *DestroyDomainResponse
func (c *ClientWithResponses) DestroyDomainWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*DestroyDomainResponse, error) {
	rsp, err := c.DestroyDomain(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDestroyDomainResponse(rsp)
}

// RetrieveDomainWithResponse request returning *RetrieveDomainResponse
func (c *ClientWithResponses) RetrieveDomainWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*RetrieveDomainResponse, error) {
	rsp, err := c.RetrieveDomain(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveDomainResponse(rsp)
}

// ListRRsetsWithResponse request returning *ListRRsetsResponse
func (c *ClientWithResponses) ListRRsetsWithResponse(ctx context.Context, name string, params *ListRRsetsParams, reqEditors ...RequestEditorFn) (*ListRRsetsResponse, error) {
	rsp, err := c.ListRRsets(ctx, name, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRRsetsResponse(rsp)
}

// PartialUpdateRRsetsWithBodyWithResponse request with arbitrary body returning *PartialUpdateRRsetsResponse
func (c *ClientWithResponses) PartialUpdateRRsetsWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PartialUpdateRRsetsResponse, error) {
	rsp, err := c.PartialUpdateRRsetsWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePartialUpdateRRsetsResponse(rsp)
}

func (c *ClientWithResponses) PartialUpdateRRsetsWithResponse(ctx context.Context, name string, body PartialUpdateRRsetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PartialUpdateRRsetsResponse, error) {
	rsp, err := c.PartialUpdateRRsets(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePartialUpdateRRsetsResponse(rsp)
}

// CreateRRsetsWithBodyWithResponse request with arbitrary body returning *CreateRRsetsResponse
func (c *ClientWithResponses) CreateRRsetsWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRRsetsResponse, error) {
	rsp, err := c.CreateRRsetsWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRRsetsResponse(rsp)
}

func (c *ClientWithResponses) CreateRRsetsWithResponse(ctx context.Context, name string, body CreateRRsetsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRRsetsResponse, error) {
	rsp, err := c.CreateRRsets(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRRsetsResponse(rsp)
}

// UpdateRRsetsWithBodyWithResponse request with arbitrary body returning *UpdateRRsetsResponse
func (c *ClientWithResponses) UpdateRRsetsWithBodyWithResponse(ctx context.Context, name string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRRsetsResponse, error) {
	rsp, err := c.UpdateRRsetsWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRRsetsResponse(rsp)
}

func (c *ClientWithResponses) UpdateRRsetsWithResponse(ctx context.Context, name string, body UpdateRRsetsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRRsetsResponse, error) {
	rsp, err := c.UpdateRRsets(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRRsetsResponse(rsp)
}

// DestroyRRsetWithResponse request returning *DestroyRRsetResponse
func (c *ClientWithResponses) DestroyRRsetWithResponse(ctx context.Context, name string, subname string, pType string, reqEditors ...RequestEditorFn) (*DestroyRRsetResponse, error) {
	rsp, err := c.DestroyRRset(ctx, name, subname, pType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDestroyRRsetResponse(rsp)
}

// RetrieveRRsetWithResponse request returning *RetrieveRRsetResponse
func (c *ClientWithResponses) RetrieveRRsetWithResponse(ctx context.Context, name string, subname string, pType string, reqEditors ...RequestEditorFn) (*RetrieveRRsetResponse, error) {
	rsp, err := c.RetrieveRRset(ctx, name, subname, pType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveRRsetResponse(rsp)
}

// PartialUpdateRRsetWithBodyWithResponse request with arbitrary body returning *PartialUpdateRRsetResponse
func (c *ClientWithResponses) PartialUpdateRRsetWithBodyWithResponse(ctx context.Context, name string, subname string, pType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PartialUpdateRRsetResponse, error) {
	rsp, err := c.PartialUpdateRRsetWithBody(ctx, name, subname, pType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePartialUpdateRRsetResponse(rsp)
}

func (c *ClientWithResponses) PartialUpdateRRsetWithResponse(ctx context.Context, name string, subname string, pType string, body PartialUpdateRRsetJSONRequestBody, reqEditors ...RequestEditorFn) (*PartialUpdateRRsetResponse, error) {
	rsp, err := c.PartialUpdateRRset(ctx, name, subname, pType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePartialUpdateRRsetResponse(rsp)
}

// UpdateRRsetWithBodyWithResponse request with arbitrary body returning *UpdateRRsetResponse
func (c *ClientWithResponses) UpdateRRsetWithBodyWithResponse(ctx context.Context, name string, subname string, pType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRRsetResponse, error) {
	rsp, err := c.UpdateRRsetWithBody(ctx, name, subname, pType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRRsetResponse(rsp)
}

func (c *ClientWithResponses) UpdateRRsetWithResponse(ctx context.Context, name string, subname string, pType string, body UpdateRRsetJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRRsetResponse, error) {
	rsp, err := c.UpdateRRset(ctx, name, subname, pType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRRsetResponse(rsp)
}

// CreateDonationWithBodyWithResponse request with arbitrary body returning *CreateDonationResponse
func (c *ClientWithResponses) CreateDonationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDonationResponse, error) {
	rsp, err := c.CreateDonationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDonationResponse(rsp)
}

func (c *ClientWithResponses) CreateDonationWithResponse(ctx context.Context, body CreateDonationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDonationResponse, error) {
	rsp, err := c.CreateDonation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDonationResponse(rsp)
}

// ListDyndnsRRsetsWithResponse request returning *ListDyndnsRRsetsResponse
func (c *ClientWithResponses) ListDyndnsRRsetsWithResponse(ctx context.Context, params *ListDyndnsRRsetsParams, reqEditors ...RequestEditorFn) (*ListDyndnsRRsetsResponse, error) {
	rsp, err := c.ListDyndnsRRsets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDyndnsRRsetsResponse(rsp)
}

// ListSerialsWithResponse request returning *ListSerialsResponse
func (c *ClientWithResponses) ListSerialsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListSerialsResponse, error) {
	rsp, err := c.ListSerials(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSerialsResponse(rsp)
}

// RetrieveAuthenticatedActivateUserActionWithResponse request returning *RetrieveAuthenticatedActivateUserActionResponse
func (c *ClientWithResponses) RetrieveAuthenticatedActivateUserActionWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*RetrieveAuthenticatedActivateUserActionResponse, error) {
	rsp, err := c.RetrieveAuthenticatedActivateUserAction(ctx, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveAuthenticatedActivateUserActionResponse(rsp)
}

// CreateAuthenticatedActivateUserActionWithBodyWithResponse request with arbitrary body returning *CreateAuthenticatedActivateUserActionResponse
func (c *ClientWithResponses) CreateAuthenticatedActivateUserActionWithBodyWithResponse(ctx context.Context, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthenticatedActivateUserActionResponse, error) {
	rsp, err := c.CreateAuthenticatedActivateUserActionWithBody(ctx, code, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthenticatedActivateUserActionResponse(rsp)
}

func (c *ClientWithResponses) CreateAuthenticatedActivateUserActionWithResponse(ctx context.Context, code string, body CreateAuthenticatedActivateUserActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthenticatedActivateUserActionResponse, error) {
	rsp, err := c.CreateAuthenticatedActivateUserAction(ctx, code, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthenticatedActivateUserActionResponse(rsp)
}

// RetrieveAuthenticatedChangeEmailUserActionWithResponse request returning *RetrieveAuthenticatedChangeEmailUserActionResponse
func (c *ClientWithResponses) RetrieveAuthenticatedChangeEmailUserActionWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*RetrieveAuthenticatedChangeEmailUserActionResponse, error) {
	rsp, err := c.RetrieveAuthenticatedChangeEmailUserAction(ctx, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveAuthenticatedChangeEmailUserActionResponse(rsp)
}

// CreateAuthenticatedChangeEmailUserActionWithBodyWithResponse request with arbitrary body returning *CreateAuthenticatedChangeEmailUserActionResponse
func (c *ClientWithResponses) CreateAuthenticatedChangeEmailUserActionWithBodyWithResponse(ctx context.Context, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthenticatedChangeEmailUserActionResponse, error) {
	rsp, err := c.CreateAuthenticatedChangeEmailUserActionWithBody(ctx, code, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthenticatedChangeEmailUserActionResponse(rsp)
}

func (c *ClientWithResponses) CreateAuthenticatedChangeEmailUserActionWithResponse(ctx context.Context, code string, body CreateAuthenticatedChangeEmailUserActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthenticatedChangeEmailUserActionResponse, error) {
	rsp, err := c.CreateAuthenticatedChangeEmailUserAction(ctx, code, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthenticatedChangeEmailUserActionResponse(rsp)
}

// RetrieveAuthenticatedDeleteUserActionWithResponse request returning *RetrieveAuthenticatedDeleteUserActionResponse
func (c *ClientWithResponses) RetrieveAuthenticatedDeleteUserActionWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*RetrieveAuthenticatedDeleteUserActionResponse, error) {
	rsp, err := c.RetrieveAuthenticatedDeleteUserAction(ctx, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveAuthenticatedDeleteUserActionResponse(rsp)
}

// CreateAuthenticatedDeleteUserActionWithBodyWithResponse request with arbitrary body returning *CreateAuthenticatedDeleteUserActionResponse
func (c *ClientWithResponses) CreateAuthenticatedDeleteUserActionWithBodyWithResponse(ctx context.Context, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthenticatedDeleteUserActionResponse, error) {
	rsp, err := c.CreateAuthenticatedDeleteUserActionWithBody(ctx, code, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthenticatedDeleteUserActionResponse(rsp)
}

func (c *ClientWithResponses) CreateAuthenticatedDeleteUserActionWithResponse(ctx context.Context, code string, body CreateAuthenticatedDeleteUserActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthenticatedDeleteUserActionResponse, error) {
	rsp, err := c.CreateAuthenticatedDeleteUserAction(ctx, code, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthenticatedDeleteUserActionResponse(rsp)
}

// RetrieveAuthenticatedRenewDomainBasicUserActionWithResponse request returning *RetrieveAuthenticatedRenewDomainBasicUserActionResponse
func (c *ClientWithResponses) RetrieveAuthenticatedRenewDomainBasicUserActionWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*RetrieveAuthenticatedRenewDomainBasicUserActionResponse, error) {
	rsp, err := c.RetrieveAuthenticatedRenewDomainBasicUserAction(ctx, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveAuthenticatedRenewDomainBasicUserActionResponse(rsp)
}

// CreateAuthenticatedRenewDomainBasicUserActionWithBodyWithResponse request with arbitrary body returning *CreateAuthenticatedRenewDomainBasicUserActionResponse
func (c *ClientWithResponses) CreateAuthenticatedRenewDomainBasicUserActionWithBodyWithResponse(ctx context.Context, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthenticatedRenewDomainBasicUserActionResponse, error) {
	rsp, err := c.CreateAuthenticatedRenewDomainBasicUserActionWithBody(ctx, code, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthenticatedRenewDomainBasicUserActionResponse(rsp)
}

func (c *ClientWithResponses) CreateAuthenticatedRenewDomainBasicUserActionWithResponse(ctx context.Context, code string, body CreateAuthenticatedRenewDomainBasicUserActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthenticatedRenewDomainBasicUserActionResponse, error) {
	rsp, err := c.CreateAuthenticatedRenewDomainBasicUserAction(ctx, code, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthenticatedRenewDomainBasicUserActionResponse(rsp)
}

// RetrieveAuthenticatedResetPasswordUserActionWithResponse request returning *RetrieveAuthenticatedResetPasswordUserActionResponse
func (c *ClientWithResponses) RetrieveAuthenticatedResetPasswordUserActionWithResponse(ctx context.Context, code string, reqEditors ...RequestEditorFn) (*RetrieveAuthenticatedResetPasswordUserActionResponse, error) {
	rsp, err := c.RetrieveAuthenticatedResetPasswordUserAction(ctx, code, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveAuthenticatedResetPasswordUserActionResponse(rsp)
}

// CreateAuthenticatedResetPasswordUserActionWithBodyWithResponse request with arbitrary body returning *CreateAuthenticatedResetPasswordUserActionResponse
func (c *ClientWithResponses) CreateAuthenticatedResetPasswordUserActionWithBodyWithResponse(ctx context.Context, code string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAuthenticatedResetPasswordUserActionResponse, error) {
	rsp, err := c.CreateAuthenticatedResetPasswordUserActionWithBody(ctx, code, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthenticatedResetPasswordUserActionResponse(rsp)
}

func (c *ClientWithResponses) CreateAuthenticatedResetPasswordUserActionWithResponse(ctx context.Context, code string, body CreateAuthenticatedResetPasswordUserActionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAuthenticatedResetPasswordUserActionResponse, error) {
	rsp, err := c.CreateAuthenticatedResetPasswordUserAction(ctx, code, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAuthenticatedResetPasswordUserActionResponse(rsp)
}

// ParseListRootsResponse parses an HTTP response from a ListRootsWithResponse call
func ParseListRootsResponse(rsp *http.Response) (*ListRootsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRootsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateRegisterAccountResponse parses an HTTP response from a CreateRegisterAccountWithResponse call
func ParseCreateRegisterAccountResponse(rsp *http.Response) (*CreateRegisterAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRegisterAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RegisterAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRetrieveUserResponse parses an HTTP response from a RetrieveUserWithResponse call
func ParseRetrieveUserResponse(rsp *http.Response) (*RetrieveUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateChangeEmailResponse parses an HTTP response from a CreateChangeEmailWithResponse call
func ParseCreateChangeEmailResponse(rsp *http.Response) (*CreateChangeEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateChangeEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ChangeEmail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCreateAccountDeleteResponse parses an HTTP response from a CreateAccountDeleteWithResponse call
func ParseCreateAccountDeleteResponse(rsp *http.Response) (*CreateAccountDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAccountDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCreateResetPasswordResponse parses an HTTP response from a CreateResetPasswordWithResponse call
func ParseCreateResetPasswordResponse(rsp *http.Response) (*CreateResetPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateResetPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ResetPassword
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCreateTokenFromLoginResponse parses an HTTP response from a CreateTokenFromLoginWithResponse call
func ParseCreateTokenFromLoginResponse(rsp *http.Response) (*CreateTokenFromLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTokenFromLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Token
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCreateAccountLogoutResponse parses an HTTP response from a CreateAccountLogoutWithResponse call
func ParseCreateAccountLogoutResponse(rsp *http.Response) (*CreateAccountLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAccountLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListTokensResponse parses an HTTP response from a ListTokensWithResponse call
func ParseListTokensResponse(rsp *http.Response) (*ListTokensResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Next     *string  `json:"next"`
			Previous *string  `json:"previous"`
			Results  *[]Token `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateTokenResponse parses an HTTP response from a CreateTokenWithResponse call
func ParseCreateTokenResponse(rsp *http.Response) (*CreateTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Token
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDestroyTokenResponse parses an HTTP response from a DestroyTokenWithResponse call
func ParseDestroyTokenResponse(rsp *http.Response) (*DestroyTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DestroyTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRetrieveTokenResponse parses an HTTP response from a RetrieveTokenWithResponse call
func ParseRetrieveTokenResponse(rsp *http.Response) (*RetrieveTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Token
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePartialUpdateTokenResponse parses an HTTP response from a PartialUpdateTokenWithResponse call
func ParsePartialUpdateTokenResponse(rsp *http.Response) (*PartialUpdateTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PartialUpdateTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Token
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateTokenResponse parses an HTTP response from a UpdateTokenWithResponse call
func ParseUpdateTokenResponse(rsp *http.Response) (*UpdateTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Token
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCaptchaResponse parses an HTTP response from a CreateCaptchaWithResponse call
func ParseCreateCaptchaResponse(rsp *http.Response) (*CreateCaptchaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCaptchaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Captcha
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListDomainsResponse parses an HTTP response from a ListDomainsWithResponse call
func ParseListDomainsResponse(rsp *http.Response) (*ListDomainsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDomainsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateDomainResponse parses an HTTP response from a CreateDomainWithResponse call
func ParseCreateDomainResponse(rsp *http.Response) (*CreateDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDestroyDomainResponse parses an HTTP response from a DestroyDomainWithResponse call
func ParseDestroyDomainResponse(rsp *http.Response) (*DestroyDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DestroyDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRetrieveDomainResponse parses an HTTP response from a RetrieveDomainWithResponse call
func ParseRetrieveDomainResponse(rsp *http.Response) (*RetrieveDomainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Domain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListRRsetsResponse parses an HTTP response from a ListRRsetsWithResponse call
func ParseListRRsetsResponse(rsp *http.Response) (*ListRRsetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRRsetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RRset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePartialUpdateRRsetsResponse parses an HTTP response from a PartialUpdateRRsetsWithResponse call
func ParsePartialUpdateRRsetsResponse(rsp *http.Response) (*PartialUpdateRRsetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PartialUpdateRRsetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RRset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateRRsetsResponse parses an HTTP response from a CreateRRsetsWithResponse call
func ParseCreateRRsetsResponse(rsp *http.Response) (*CreateRRsetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRRsetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RRset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUpdateRRsetsResponse parses an HTTP response from a UpdateRRsetsWithResponse call
func ParseUpdateRRsetsResponse(rsp *http.Response) (*UpdateRRsetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRRsetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RRset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDestroyRRsetResponse parses an HTTP response from a DestroyRRsetWithResponse call
func ParseDestroyRRsetResponse(rsp *http.Response) (*DestroyRRsetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DestroyRRsetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRetrieveRRsetResponse parses an HTTP response from a RetrieveRRsetWithResponse call
func ParseRetrieveRRsetResponse(rsp *http.Response) (*RetrieveRRsetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveRRsetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RRset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePartialUpdateRRsetResponse parses an HTTP response from a PartialUpdateRRsetWithResponse call
func ParsePartialUpdateRRsetResponse(rsp *http.Response) (*PartialUpdateRRsetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PartialUpdateRRsetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RRset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateRRsetResponse parses an HTTP response from a UpdateRRsetWithResponse call
func ParseUpdateRRsetResponse(rsp *http.Response) (*UpdateRRsetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRRsetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RRset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateDonationResponse parses an HTTP response from a CreateDonationWithResponse call
func ParseCreateDonationResponse(rsp *http.Response) (*CreateDonationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDonationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Donation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListDyndnsRRsetsResponse parses an HTTP response from a ListDyndnsRRsetsWithResponse call
func ParseListDyndnsRRsetsResponse(rsp *http.Response) (*ListDyndnsRRsetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDyndnsRRsetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListSerialsResponse parses an HTTP response from a ListSerialsWithResponse call
func ParseListSerialsResponse(rsp *http.Response) (*ListSerialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSerialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRetrieveAuthenticatedActivateUserActionResponse parses an HTTP response from a RetrieveAuthenticatedActivateUserActionWithResponse call
func ParseRetrieveAuthenticatedActivateUserActionResponse(rsp *http.Response) (*RetrieveAuthenticatedActivateUserActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveAuthenticatedActivateUserActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthenticatedActivateUserAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseCreateAuthenticatedActivateUserActionResponse parses an HTTP response from a CreateAuthenticatedActivateUserActionWithResponse call
func ParseCreateAuthenticatedActivateUserActionResponse(rsp *http.Response) (*CreateAuthenticatedActivateUserActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAuthenticatedActivateUserActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AuthenticatedActivateUserAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 201:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseRetrieveAuthenticatedChangeEmailUserActionResponse parses an HTTP response from a RetrieveAuthenticatedChangeEmailUserActionWithResponse call
func ParseRetrieveAuthenticatedChangeEmailUserActionResponse(rsp *http.Response) (*RetrieveAuthenticatedChangeEmailUserActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveAuthenticatedChangeEmailUserActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthenticatedChangeEmailUserAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseCreateAuthenticatedChangeEmailUserActionResponse parses an HTTP response from a CreateAuthenticatedChangeEmailUserActionWithResponse call
func ParseCreateAuthenticatedChangeEmailUserActionResponse(rsp *http.Response) (*CreateAuthenticatedChangeEmailUserActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAuthenticatedChangeEmailUserActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AuthenticatedChangeEmailUserAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 201:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseRetrieveAuthenticatedDeleteUserActionResponse parses an HTTP response from a RetrieveAuthenticatedDeleteUserActionWithResponse call
func ParseRetrieveAuthenticatedDeleteUserActionResponse(rsp *http.Response) (*RetrieveAuthenticatedDeleteUserActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveAuthenticatedDeleteUserActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthenticatedDeleteUserAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseCreateAuthenticatedDeleteUserActionResponse parses an HTTP response from a CreateAuthenticatedDeleteUserActionWithResponse call
func ParseCreateAuthenticatedDeleteUserActionResponse(rsp *http.Response) (*CreateAuthenticatedDeleteUserActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAuthenticatedDeleteUserActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AuthenticatedDeleteUserAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 201:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseRetrieveAuthenticatedRenewDomainBasicUserActionResponse parses an HTTP response from a RetrieveAuthenticatedRenewDomainBasicUserActionWithResponse call
func ParseRetrieveAuthenticatedRenewDomainBasicUserActionResponse(rsp *http.Response) (*RetrieveAuthenticatedRenewDomainBasicUserActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveAuthenticatedRenewDomainBasicUserActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthenticatedRenewDomainBasicUserAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseCreateAuthenticatedRenewDomainBasicUserActionResponse parses an HTTP response from a CreateAuthenticatedRenewDomainBasicUserActionWithResponse call
func ParseCreateAuthenticatedRenewDomainBasicUserActionResponse(rsp *http.Response) (*CreateAuthenticatedRenewDomainBasicUserActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAuthenticatedRenewDomainBasicUserActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AuthenticatedRenewDomainBasicUserAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 201:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseRetrieveAuthenticatedResetPasswordUserActionResponse parses an HTTP response from a RetrieveAuthenticatedResetPasswordUserActionWithResponse call
func ParseRetrieveAuthenticatedResetPasswordUserActionResponse(rsp *http.Response) (*RetrieveAuthenticatedResetPasswordUserActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveAuthenticatedResetPasswordUserActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthenticatedResetPasswordUserAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/html) unsupported

	}

	return response, nil
}

// ParseCreateAuthenticatedResetPasswordUserActionResponse parses an HTTP response from a CreateAuthenticatedResetPasswordUserActionWithResponse call
func ParseCreateAuthenticatedResetPasswordUserActionResponse(rsp *http.Response) (*CreateAuthenticatedResetPasswordUserActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAuthenticatedResetPasswordUserActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AuthenticatedResetPasswordUserAction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case rsp.StatusCode == 201:
		// Content-type (text/html) unsupported

	}

	return response, nil
}
