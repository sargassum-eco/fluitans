// Package desec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package desec

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for CaptchaKind.
const (
	Audio CaptchaKind = "audio"
	Image CaptchaKind = "image"
)

// Defines values for DonationInterval.
const (
	N0 DonationInterval = 0
	N1 DonationInterval = 1
	N3 DonationInterval = 3
)

// AuthenticatedActivateUserAction defines model for AuthenticatedActivateUserAction.
type AuthenticatedActivateUserAction struct {
	Captcha *struct {
		Id       string  `json:"id"`
		Solution *string `json:"solution,omitempty"`
	} `json:"captcha,omitempty"`
	Domain *string `json:"domain"`
	State  string  `json:"state"`
	User   string  `json:"user"`
}

// AuthenticatedChangeEmailUserAction defines model for AuthenticatedChangeEmailUserAction.
type AuthenticatedChangeEmailUserAction struct {
	NewEmail openapi_types.Email `json:"new_email"`
	State    string              `json:"state"`
	User     string              `json:"user"`
}

// AuthenticatedDeleteUserAction defines model for AuthenticatedDeleteUserAction.
type AuthenticatedDeleteUserAction struct {
	State string `json:"state"`
	User  string `json:"user"`
}

// AuthenticatedRenewDomainBasicUserAction defines model for AuthenticatedRenewDomainBasicUserAction.
type AuthenticatedRenewDomainBasicUserAction struct {
	Domain int    `json:"domain"`
	State  string `json:"state"`
	User   string `json:"user"`
}

// AuthenticatedResetPasswordUserAction defines model for AuthenticatedResetPasswordUserAction.
type AuthenticatedResetPasswordUserAction struct {
	NewPassword *string `json:"new_password,omitempty"`
	State       string  `json:"state"`
	User        string  `json:"user"`
}

// Captcha defines model for Captcha.
type Captcha struct {
	Challenge *string             `json:"challenge,omitempty"`
	Content   *string             `json:"content,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Kind      *CaptchaKind        `json:"kind,omitempty"`
}

// CaptchaKind defines model for Captcha.Kind.
type CaptchaKind string

// ChangeEmail defines model for ChangeEmail.
type ChangeEmail struct {
	NewEmail openapi_types.Email `json:"new_email"`
}

// Domain defines model for Domain.
type Domain struct {
	Created    *time.Time `json:"created,omitempty"`
	Keys       *[]Key     `json:"keys,omitempty"`
	MinimumTtl *int       `json:"minimum_ttl,omitempty"`
	Name       string     `json:"name"`
	Published  *time.Time `json:"published,omitempty"`
	Touched    *string    `json:"touched,omitempty"`
}

// Donation defines model for Donation.
type Donation struct {
	Amount   string               `json:"amount"`
	Bic      *string              `json:"bic,omitempty"`
	Email    *openapi_types.Email `json:"email,omitempty"`
	Iban     string               `json:"iban"`
	Interval *DonationInterval    `json:"interval,omitempty"`
	Message  *string              `json:"message,omitempty"`
	Mref     *string              `json:"mref,omitempty"`
	Name     string               `json:"name"`
}

// DonationInterval defines model for Donation.Interval.
type DonationInterval int

// Key defines model for Key.
type Key struct {
	Dnskey  *string   `json:"dnskey,omitempty"`
	Ds      *[]string `json:"ds,omitempty"`
	Flags   *int      `json:"flags,omitempty"`
	Keytype *string   `json:"keytype,omitempty"`
}

// RRset defines model for RRset.
type RRset struct {
	Created *time.Time `json:"created,omitempty"`
	Domain  *string    `json:"domain,omitempty"`
	Name    *string    `json:"name,omitempty"`
	Records []string   `json:"records"`
	Subname *string    `json:"subname,omitempty"`
	Touched *time.Time `json:"touched,omitempty"`
	Ttl     int        `json:"ttl"`
	Type    string     `json:"type"`
}

// RegisterAccount defines model for RegisterAccount.
type RegisterAccount struct {
	Captcha *struct {
		Id       string  `json:"id"`
		Solution *string `json:"solution,omitempty"`
	} `json:"captcha,omitempty"`
	Domain   *string             `json:"domain,omitempty"`
	Email    openapi_types.Email `json:"email"`
	Password *string             `json:"password"`
}

// ResetPassword defines model for ResetPassword.
type ResetPassword struct {
	Captcha struct {
		Id       string  `json:"id"`
		Solution *string `json:"solution,omitempty"`
	} `json:"captcha"`
	Email openapi_types.Email `json:"email"`
}

// Token defines model for Token.
type Token struct {
	AllowedSubnets   *[]string           `json:"allowed_subnets,omitempty"`
	Created          *time.Time          `json:"created,omitempty"`
	Id               *openapi_types.UUID `json:"id,omitempty"`
	IsValid          *string             `json:"is_valid,omitempty"`
	LastUsed         *time.Time          `json:"last_used,omitempty"`
	MaxAge           *string             `json:"max_age"`
	MaxUnusedPeriod  *string             `json:"max_unused_period"`
	Name             *string             `json:"name,omitempty"`
	PermManageTokens *bool               `json:"perm_manage_tokens,omitempty"`
}

// User defines model for User.
type User struct {
	Created      *time.Time          `json:"created,omitempty"`
	Email        openapi_types.Email `json:"email"`
	Id           *openapi_types.UUID `json:"id,omitempty"`
	LimitDomains *int                `json:"limit_domains"`
	Password     *string             `json:"password"`
}

// CreateRegisterAccountJSONBody defines parameters for CreateRegisterAccount.
type CreateRegisterAccountJSONBody = RegisterAccount

// CreateChangeEmailJSONBody defines parameters for CreateChangeEmail.
type CreateChangeEmailJSONBody = ChangeEmail

// CreateAccountDeleteJSONBody defines parameters for CreateAccountDelete.
type CreateAccountDeleteJSONBody = interface{}

// CreateResetPasswordJSONBody defines parameters for CreateResetPassword.
type CreateResetPasswordJSONBody = ResetPassword

// CreateTokenFromLoginJSONBody defines parameters for CreateTokenFromLogin.
type CreateTokenFromLoginJSONBody = Token

// CreateAccountLogoutJSONBody defines parameters for CreateAccountLogout.
type CreateAccountLogoutJSONBody = interface{}

// ListTokensParams defines parameters for ListTokens.
type ListTokensParams struct {
	// The pagination cursor value.
	Cursor *int `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// CreateTokenJSONBody defines parameters for CreateToken.
type CreateTokenJSONBody = Token

// PartialUpdateTokenJSONBody defines parameters for PartialUpdateToken.
type PartialUpdateTokenJSONBody = Token

// UpdateTokenJSONBody defines parameters for UpdateToken.
type UpdateTokenJSONBody = Token

// CreateCaptchaJSONBody defines parameters for CreateCaptcha.
type CreateCaptchaJSONBody = Captcha

// ListDomainsParams defines parameters for ListDomains.
type ListDomainsParams struct {
	// The pagination cursor value.
	Cursor *int `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// CreateDomainJSONBody defines parameters for CreateDomain.
type CreateDomainJSONBody = Domain

// ListRRsetsParams defines parameters for ListRRsets.
type ListRRsetsParams struct {
	// The subname filter.
	Subname *string `form:"subname,omitempty" json:"subname,omitempty"`

	// The record type filter.
	Type *string `form:"type,omitempty" json:"type,omitempty"`

	// The pagination cursor value.
	Cursor *int `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// PartialUpdateRRsetsJSONBody defines parameters for PartialUpdateRRsets.
type PartialUpdateRRsetsJSONBody = RRset

// CreateRRsetsJSONBody defines parameters for CreateRRsets.
type CreateRRsetsJSONBody = RRset

// UpdateRRsetsJSONBody defines parameters for UpdateRRsets.
type UpdateRRsetsJSONBody = RRset

// PartialUpdateRRsetJSONBody defines parameters for PartialUpdateRRset.
type PartialUpdateRRsetJSONBody = RRset

// UpdateRRsetJSONBody defines parameters for UpdateRRset.
type UpdateRRsetJSONBody = RRset

// CreateDonationJSONBody defines parameters for CreateDonation.
type CreateDonationJSONBody = Donation

// ListDyndnsRRsetsParams defines parameters for ListDyndnsRRsets.
type ListDyndnsRRsetsParams struct {
	// The pagination cursor value.
	Cursor *int `form:"cursor,omitempty" json:"cursor,omitempty"`
}

// CreateAuthenticatedActivateUserActionJSONBody defines parameters for CreateAuthenticatedActivateUserAction.
type CreateAuthenticatedActivateUserActionJSONBody = AuthenticatedActivateUserAction

// CreateAuthenticatedChangeEmailUserActionJSONBody defines parameters for CreateAuthenticatedChangeEmailUserAction.
type CreateAuthenticatedChangeEmailUserActionJSONBody = AuthenticatedChangeEmailUserAction

// CreateAuthenticatedDeleteUserActionJSONBody defines parameters for CreateAuthenticatedDeleteUserAction.
type CreateAuthenticatedDeleteUserActionJSONBody = AuthenticatedDeleteUserAction

// CreateAuthenticatedRenewDomainBasicUserActionJSONBody defines parameters for CreateAuthenticatedRenewDomainBasicUserAction.
type CreateAuthenticatedRenewDomainBasicUserActionJSONBody = AuthenticatedRenewDomainBasicUserAction

// CreateAuthenticatedResetPasswordUserActionJSONBody defines parameters for CreateAuthenticatedResetPasswordUserAction.
type CreateAuthenticatedResetPasswordUserActionJSONBody = AuthenticatedResetPasswordUserAction

// CreateRegisterAccountJSONRequestBody defines body for CreateRegisterAccount for application/json ContentType.
type CreateRegisterAccountJSONRequestBody = CreateRegisterAccountJSONBody

// CreateChangeEmailJSONRequestBody defines body for CreateChangeEmail for application/json ContentType.
type CreateChangeEmailJSONRequestBody = CreateChangeEmailJSONBody

// CreateAccountDeleteJSONRequestBody defines body for CreateAccountDelete for application/json ContentType.
type CreateAccountDeleteJSONRequestBody = CreateAccountDeleteJSONBody

// CreateResetPasswordJSONRequestBody defines body for CreateResetPassword for application/json ContentType.
type CreateResetPasswordJSONRequestBody = CreateResetPasswordJSONBody

// CreateTokenFromLoginJSONRequestBody defines body for CreateTokenFromLogin for application/json ContentType.
type CreateTokenFromLoginJSONRequestBody = CreateTokenFromLoginJSONBody

// CreateAccountLogoutJSONRequestBody defines body for CreateAccountLogout for application/json ContentType.
type CreateAccountLogoutJSONRequestBody = CreateAccountLogoutJSONBody

// CreateTokenJSONRequestBody defines body for CreateToken for application/json ContentType.
type CreateTokenJSONRequestBody = CreateTokenJSONBody

// PartialUpdateTokenJSONRequestBody defines body for PartialUpdateToken for application/json ContentType.
type PartialUpdateTokenJSONRequestBody = PartialUpdateTokenJSONBody

// UpdateTokenJSONRequestBody defines body for UpdateToken for application/json ContentType.
type UpdateTokenJSONRequestBody = UpdateTokenJSONBody

// CreateCaptchaJSONRequestBody defines body for CreateCaptcha for application/json ContentType.
type CreateCaptchaJSONRequestBody = CreateCaptchaJSONBody

// CreateDomainJSONRequestBody defines body for CreateDomain for application/json ContentType.
type CreateDomainJSONRequestBody = CreateDomainJSONBody

// PartialUpdateRRsetsJSONRequestBody defines body for PartialUpdateRRsets for application/json ContentType.
type PartialUpdateRRsetsJSONRequestBody = PartialUpdateRRsetsJSONBody

// CreateRRsetsJSONRequestBody defines body for CreateRRsets for application/json ContentType.
type CreateRRsetsJSONRequestBody = CreateRRsetsJSONBody

// UpdateRRsetsJSONRequestBody defines body for UpdateRRsets for application/json ContentType.
type UpdateRRsetsJSONRequestBody = UpdateRRsetsJSONBody

// PartialUpdateRRsetJSONRequestBody defines body for PartialUpdateRRset for application/json ContentType.
type PartialUpdateRRsetJSONRequestBody = PartialUpdateRRsetJSONBody

// UpdateRRsetJSONRequestBody defines body for UpdateRRset for application/json ContentType.
type UpdateRRsetJSONRequestBody = UpdateRRsetJSONBody

// CreateDonationJSONRequestBody defines body for CreateDonation for application/json ContentType.
type CreateDonationJSONRequestBody = CreateDonationJSONBody

// CreateAuthenticatedActivateUserActionJSONRequestBody defines body for CreateAuthenticatedActivateUserAction for application/json ContentType.
type CreateAuthenticatedActivateUserActionJSONRequestBody = CreateAuthenticatedActivateUserActionJSONBody

// CreateAuthenticatedChangeEmailUserActionJSONRequestBody defines body for CreateAuthenticatedChangeEmailUserAction for application/json ContentType.
type CreateAuthenticatedChangeEmailUserActionJSONRequestBody = CreateAuthenticatedChangeEmailUserActionJSONBody

// CreateAuthenticatedDeleteUserActionJSONRequestBody defines body for CreateAuthenticatedDeleteUserAction for application/json ContentType.
type CreateAuthenticatedDeleteUserActionJSONRequestBody = CreateAuthenticatedDeleteUserActionJSONBody

// CreateAuthenticatedRenewDomainBasicUserActionJSONRequestBody defines body for CreateAuthenticatedRenewDomainBasicUserAction for application/json ContentType.
type CreateAuthenticatedRenewDomainBasicUserActionJSONRequestBody = CreateAuthenticatedRenewDomainBasicUserActionJSONBody

// CreateAuthenticatedResetPasswordUserActionJSONRequestBody defines body for CreateAuthenticatedResetPasswordUserAction for application/json ContentType.
type CreateAuthenticatedResetPasswordUserActionJSONRequestBody = CreateAuthenticatedResetPasswordUserActionJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/v1/)
	ListRoots(ctx echo.Context) error

	// (POST /api/v1/auth/)
	CreateRegisterAccount(ctx echo.Context) error

	// (GET /api/v1/auth/account/)
	RetrieveUser(ctx echo.Context) error

	// (POST /api/v1/auth/account/change-email/)
	CreateChangeEmail(ctx echo.Context) error

	// (POST /api/v1/auth/account/delete/)
	CreateAccountDelete(ctx echo.Context) error

	// (POST /api/v1/auth/account/reset-password/)
	CreateResetPassword(ctx echo.Context) error

	// (POST /api/v1/auth/login/)
	CreateTokenFromLogin(ctx echo.Context) error

	// (POST /api/v1/auth/logout/)
	CreateAccountLogout(ctx echo.Context) error

	// (GET /api/v1/auth/tokens/)
	ListTokens(ctx echo.Context, params ListTokensParams) error

	// (POST /api/v1/auth/tokens/)
	CreateToken(ctx echo.Context) error

	// (DELETE /api/v1/auth/tokens/{id}/)
	DestroyToken(ctx echo.Context, id string) error

	// (GET /api/v1/auth/tokens/{id}/)
	RetrieveToken(ctx echo.Context, id string) error

	// (PATCH /api/v1/auth/tokens/{id}/)
	PartialUpdateToken(ctx echo.Context, id string) error

	// (PUT /api/v1/auth/tokens/{id}/)
	UpdateToken(ctx echo.Context, id string) error

	// (POST /api/v1/captcha/)
	CreateCaptcha(ctx echo.Context) error

	// (GET /api/v1/domains/)
	ListDomains(ctx echo.Context, params ListDomainsParams) error

	// (POST /api/v1/domains/)
	CreateDomain(ctx echo.Context) error

	// (DELETE /api/v1/domains/{name}/)
	DestroyDomain(ctx echo.Context, name string) error

	// (GET /api/v1/domains/{name}/)
	RetrieveDomain(ctx echo.Context, name string) error

	// (GET /api/v1/domains/{name}/rrsets/)
	ListRRsets(ctx echo.Context, name string, params ListRRsetsParams) error

	// (PATCH /api/v1/domains/{name}/rrsets/)
	PartialUpdateRRsets(ctx echo.Context, name string) error

	// (POST /api/v1/domains/{name}/rrsets/)
	CreateRRsets(ctx echo.Context, name string) error

	// (PUT /api/v1/domains/{name}/rrsets/)
	UpdateRRsets(ctx echo.Context, name string) error

	// (DELETE /api/v1/domains/{name}/rrsets/{subname}.../{type}/)
	DestroyRRset(ctx echo.Context, name string, subname string, pType string) error

	// (GET /api/v1/domains/{name}/rrsets/{subname}.../{type}/)
	RetrieveRRset(ctx echo.Context, name string, subname string, pType string) error

	// (PATCH /api/v1/domains/{name}/rrsets/{subname}.../{type}/)
	PartialUpdateRRset(ctx echo.Context, name string, subname string, pType string) error

	// (PUT /api/v1/domains/{name}/rrsets/{subname}.../{type}/)
	UpdateRRset(ctx echo.Context, name string, subname string, pType string) error

	// (POST /api/v1/donation/)
	CreateDonation(ctx echo.Context) error

	// (GET /api/v1/dyndns/update)
	ListDyndnsRRsets(ctx echo.Context, params ListDyndnsRRsetsParams) error

	// (GET /api/v1/serials/)
	ListSerials(ctx echo.Context) error

	// (GET /api/v1/v/activate-account/{code}/)
	RetrieveAuthenticatedActivateUserAction(ctx echo.Context, code string) error

	// (POST /api/v1/v/activate-account/{code}/)
	CreateAuthenticatedActivateUserAction(ctx echo.Context, code string) error

	// (GET /api/v1/v/change-email/{code}/)
	RetrieveAuthenticatedChangeEmailUserAction(ctx echo.Context, code string) error

	// (POST /api/v1/v/change-email/{code}/)
	CreateAuthenticatedChangeEmailUserAction(ctx echo.Context, code string) error

	// (GET /api/v1/v/delete-account/{code}/)
	RetrieveAuthenticatedDeleteUserAction(ctx echo.Context, code string) error

	// (POST /api/v1/v/delete-account/{code}/)
	CreateAuthenticatedDeleteUserAction(ctx echo.Context, code string) error

	// (GET /api/v1/v/renew-domain/{code}/)
	RetrieveAuthenticatedRenewDomainBasicUserAction(ctx echo.Context, code string) error

	// (POST /api/v1/v/renew-domain/{code}/)
	CreateAuthenticatedRenewDomainBasicUserAction(ctx echo.Context, code string) error

	// (GET /api/v1/v/reset-password/{code}/)
	RetrieveAuthenticatedResetPasswordUserAction(ctx echo.Context, code string) error

	// (POST /api/v1/v/reset-password/{code}/)
	CreateAuthenticatedResetPasswordUserAction(ctx echo.Context, code string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListRoots converts echo context to params.
func (w *ServerInterfaceWrapper) ListRoots(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRoots(ctx)
	return err
}

// CreateRegisterAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRegisterAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRegisterAccount(ctx)
	return err
}

// RetrieveUser converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveUser(ctx)
	return err
}

// CreateChangeEmail converts echo context to params.
func (w *ServerInterfaceWrapper) CreateChangeEmail(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateChangeEmail(ctx)
	return err
}

// CreateAccountDelete converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccountDelete(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAccountDelete(ctx)
	return err
}

// CreateResetPassword converts echo context to params.
func (w *ServerInterfaceWrapper) CreateResetPassword(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateResetPassword(ctx)
	return err
}

// CreateTokenFromLogin converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTokenFromLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTokenFromLogin(ctx)
	return err
}

// CreateAccountLogout converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccountLogout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAccountLogout(ctx)
	return err
}

// ListTokens converts echo context to params.
func (w *ServerInterfaceWrapper) ListTokens(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTokensParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTokens(ctx, params)
	return err
}

// CreateToken converts echo context to params.
func (w *ServerInterfaceWrapper) CreateToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateToken(ctx)
	return err
}

// DestroyToken converts echo context to params.
func (w *ServerInterfaceWrapper) DestroyToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DestroyToken(ctx, id)
	return err
}

// RetrieveToken converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveToken(ctx, id)
	return err
}

// PartialUpdateToken converts echo context to params.
func (w *ServerInterfaceWrapper) PartialUpdateToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PartialUpdateToken(ctx, id)
	return err
}

// UpdateToken converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateToken(ctx, id)
	return err
}

// CreateCaptcha converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCaptcha(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCaptcha(ctx)
	return err
}

// ListDomains converts echo context to params.
func (w *ServerInterfaceWrapper) ListDomains(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDomainsParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListDomains(ctx, params)
	return err
}

// CreateDomain converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDomain(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateDomain(ctx)
	return err
}

// DestroyDomain converts echo context to params.
func (w *ServerInterfaceWrapper) DestroyDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DestroyDomain(ctx, name)
	return err
}

// RetrieveDomain converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveDomain(ctx, name)
	return err
}

// ListRRsets converts echo context to params.
func (w *ServerInterfaceWrapper) ListRRsets(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRRsetsParams
	// ------------- Optional query parameter "subname" -------------

	err = runtime.BindQueryParameter("form", true, false, "subname", ctx.QueryParams(), &params.Subname)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subname: %s", err))
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRRsets(ctx, name, params)
	return err
}

// PartialUpdateRRsets converts echo context to params.
func (w *ServerInterfaceWrapper) PartialUpdateRRsets(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PartialUpdateRRsets(ctx, name)
	return err
}

// CreateRRsets converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRRsets(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateRRsets(ctx, name)
	return err
}

// UpdateRRsets converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRRsets(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRRsets(ctx, name)
	return err
}

// DestroyRRset converts echo context to params.
func (w *ServerInterfaceWrapper) DestroyRRset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Path parameter "subname" -------------
	var subname string

	err = runtime.BindStyledParameterWithLocation("simple", false, "subname", runtime.ParamLocationPath, ctx.Param("subname"), &subname)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subname: %s", err))
	}

	// ------------- Path parameter "type" -------------
	var pType string

	err = runtime.BindStyledParameterWithLocation("simple", false, "type", runtime.ParamLocationPath, ctx.Param("type"), &pType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DestroyRRset(ctx, name, subname, pType)
	return err
}

// RetrieveRRset converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveRRset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Path parameter "subname" -------------
	var subname string

	err = runtime.BindStyledParameterWithLocation("simple", false, "subname", runtime.ParamLocationPath, ctx.Param("subname"), &subname)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subname: %s", err))
	}

	// ------------- Path parameter "type" -------------
	var pType string

	err = runtime.BindStyledParameterWithLocation("simple", false, "type", runtime.ParamLocationPath, ctx.Param("type"), &pType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveRRset(ctx, name, subname, pType)
	return err
}

// PartialUpdateRRset converts echo context to params.
func (w *ServerInterfaceWrapper) PartialUpdateRRset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Path parameter "subname" -------------
	var subname string

	err = runtime.BindStyledParameterWithLocation("simple", false, "subname", runtime.ParamLocationPath, ctx.Param("subname"), &subname)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subname: %s", err))
	}

	// ------------- Path parameter "type" -------------
	var pType string

	err = runtime.BindStyledParameterWithLocation("simple", false, "type", runtime.ParamLocationPath, ctx.Param("type"), &pType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PartialUpdateRRset(ctx, name, subname, pType)
	return err
}

// UpdateRRset converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRRset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Path parameter "subname" -------------
	var subname string

	err = runtime.BindStyledParameterWithLocation("simple", false, "subname", runtime.ParamLocationPath, ctx.Param("subname"), &subname)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subname: %s", err))
	}

	// ------------- Path parameter "type" -------------
	var pType string

	err = runtime.BindStyledParameterWithLocation("simple", false, "type", runtime.ParamLocationPath, ctx.Param("type"), &pType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateRRset(ctx, name, subname, pType)
	return err
}

// CreateDonation converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDonation(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateDonation(ctx)
	return err
}

// ListDyndnsRRsets converts echo context to params.
func (w *ServerInterfaceWrapper) ListDyndnsRRsets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDyndnsRRsetsParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListDyndnsRRsets(ctx, params)
	return err
}

// ListSerials converts echo context to params.
func (w *ServerInterfaceWrapper) ListSerials(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListSerials(ctx)
	return err
}

// RetrieveAuthenticatedActivateUserAction converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveAuthenticatedActivateUserAction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, ctx.Param("code"), &code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveAuthenticatedActivateUserAction(ctx, code)
	return err
}

// CreateAuthenticatedActivateUserAction converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAuthenticatedActivateUserAction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, ctx.Param("code"), &code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAuthenticatedActivateUserAction(ctx, code)
	return err
}

// RetrieveAuthenticatedChangeEmailUserAction converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveAuthenticatedChangeEmailUserAction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, ctx.Param("code"), &code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveAuthenticatedChangeEmailUserAction(ctx, code)
	return err
}

// CreateAuthenticatedChangeEmailUserAction converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAuthenticatedChangeEmailUserAction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, ctx.Param("code"), &code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAuthenticatedChangeEmailUserAction(ctx, code)
	return err
}

// RetrieveAuthenticatedDeleteUserAction converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveAuthenticatedDeleteUserAction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, ctx.Param("code"), &code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveAuthenticatedDeleteUserAction(ctx, code)
	return err
}

// CreateAuthenticatedDeleteUserAction converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAuthenticatedDeleteUserAction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, ctx.Param("code"), &code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAuthenticatedDeleteUserAction(ctx, code)
	return err
}

// RetrieveAuthenticatedRenewDomainBasicUserAction converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveAuthenticatedRenewDomainBasicUserAction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, ctx.Param("code"), &code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveAuthenticatedRenewDomainBasicUserAction(ctx, code)
	return err
}

// CreateAuthenticatedRenewDomainBasicUserAction converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAuthenticatedRenewDomainBasicUserAction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, ctx.Param("code"), &code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAuthenticatedRenewDomainBasicUserAction(ctx, code)
	return err
}

// RetrieveAuthenticatedResetPasswordUserAction converts echo context to params.
func (w *ServerInterfaceWrapper) RetrieveAuthenticatedResetPasswordUserAction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, ctx.Param("code"), &code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RetrieveAuthenticatedResetPasswordUserAction(ctx, code)
	return err
}

// CreateAuthenticatedResetPasswordUserAction converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAuthenticatedResetPasswordUserAction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithLocation("simple", false, "code", runtime.ParamLocationPath, ctx.Param("code"), &code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAuthenticatedResetPasswordUserAction(ctx, code)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/", wrapper.ListRoots)
	router.POST(baseURL+"/api/v1/auth/", wrapper.CreateRegisterAccount)
	router.GET(baseURL+"/api/v1/auth/account/", wrapper.RetrieveUser)
	router.POST(baseURL+"/api/v1/auth/account/change-email/", wrapper.CreateChangeEmail)
	router.POST(baseURL+"/api/v1/auth/account/delete/", wrapper.CreateAccountDelete)
	router.POST(baseURL+"/api/v1/auth/account/reset-password/", wrapper.CreateResetPassword)
	router.POST(baseURL+"/api/v1/auth/login/", wrapper.CreateTokenFromLogin)
	router.POST(baseURL+"/api/v1/auth/logout/", wrapper.CreateAccountLogout)
	router.GET(baseURL+"/api/v1/auth/tokens/", wrapper.ListTokens)
	router.POST(baseURL+"/api/v1/auth/tokens/", wrapper.CreateToken)
	router.DELETE(baseURL+"/api/v1/auth/tokens/:id/", wrapper.DestroyToken)
	router.GET(baseURL+"/api/v1/auth/tokens/:id/", wrapper.RetrieveToken)
	router.PATCH(baseURL+"/api/v1/auth/tokens/:id/", wrapper.PartialUpdateToken)
	router.PUT(baseURL+"/api/v1/auth/tokens/:id/", wrapper.UpdateToken)
	router.POST(baseURL+"/api/v1/captcha/", wrapper.CreateCaptcha)
	router.GET(baseURL+"/api/v1/domains/", wrapper.ListDomains)
	router.POST(baseURL+"/api/v1/domains/", wrapper.CreateDomain)
	router.DELETE(baseURL+"/api/v1/domains/:name/", wrapper.DestroyDomain)
	router.GET(baseURL+"/api/v1/domains/:name/", wrapper.RetrieveDomain)
	router.GET(baseURL+"/api/v1/domains/:name/rrsets/", wrapper.ListRRsets)
	router.PATCH(baseURL+"/api/v1/domains/:name/rrsets/", wrapper.PartialUpdateRRsets)
	router.POST(baseURL+"/api/v1/domains/:name/rrsets/", wrapper.CreateRRsets)
	router.PUT(baseURL+"/api/v1/domains/:name/rrsets/", wrapper.UpdateRRsets)
	router.DELETE(baseURL+"/api/v1/domains/:name/rrsets/:subname.../:type/", wrapper.DestroyRRset)
	router.GET(baseURL+"/api/v1/domains/:name/rrsets/:subname.../:type/", wrapper.RetrieveRRset)
	router.PATCH(baseURL+"/api/v1/domains/:name/rrsets/:subname.../:type/", wrapper.PartialUpdateRRset)
	router.PUT(baseURL+"/api/v1/domains/:name/rrsets/:subname.../:type/", wrapper.UpdateRRset)
	router.POST(baseURL+"/api/v1/donation/", wrapper.CreateDonation)
	router.GET(baseURL+"/api/v1/dyndns/update", wrapper.ListDyndnsRRsets)
	router.GET(baseURL+"/api/v1/serials/", wrapper.ListSerials)
	router.GET(baseURL+"/api/v1/v/activate-account/:code/", wrapper.RetrieveAuthenticatedActivateUserAction)
	router.POST(baseURL+"/api/v1/v/activate-account/:code/", wrapper.CreateAuthenticatedActivateUserAction)
	router.GET(baseURL+"/api/v1/v/change-email/:code/", wrapper.RetrieveAuthenticatedChangeEmailUserAction)
	router.POST(baseURL+"/api/v1/v/change-email/:code/", wrapper.CreateAuthenticatedChangeEmailUserAction)
	router.GET(baseURL+"/api/v1/v/delete-account/:code/", wrapper.RetrieveAuthenticatedDeleteUserAction)
	router.POST(baseURL+"/api/v1/v/delete-account/:code/", wrapper.CreateAuthenticatedDeleteUserAction)
	router.GET(baseURL+"/api/v1/v/renew-domain/:code/", wrapper.RetrieveAuthenticatedRenewDomainBasicUserAction)
	router.POST(baseURL+"/api/v1/v/renew-domain/:code/", wrapper.CreateAuthenticatedRenewDomainBasicUserAction)
	router.GET(baseURL+"/api/v1/v/reset-password/:code/", wrapper.RetrieveAuthenticatedResetPasswordUserAction)
	router.POST(baseURL+"/api/v1/v/reset-password/:code/", wrapper.CreateAuthenticatedResetPasswordUserAction)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
